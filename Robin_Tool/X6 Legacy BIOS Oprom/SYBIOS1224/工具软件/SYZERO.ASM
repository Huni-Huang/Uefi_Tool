;TITLE SYZERO.ASM
;本软件专为安装了SYBIOS ver1.00 软件的硬盘清除分区用，只供本公司测试人员用
;LUOBING 2005-7-7 13:13
;----------------------------------------------------------------------------
;字符
MAXASCII		=	255
MAXCHINESE	=	255
;显示模式
SYVIDEOMODE		=	0101H
DOSVIDEOMODE	=	03H
SCREEN_WIDTH	=	640
SCREEN_HEIGHT	=	480

;颜色的常量定义
BLACK	=	0
WHITE	=	1
LIGHTGRAY	=	2
DEEPBLUE	=	3
DARKBLACK	=	4
LIGHTBLACK	=	5
YELLOW	=	6
GREEN	=	7
RED	=	8
BLUE	=	9
;
HZCOUNT	=	66					;当前汉字提取了66个
;
;图象长度 高度常量
CHARWIDTH	=	8
CHARHEIGHT	=	16
DEFAULTBUTTONHEIGHT	=	32		;2*CHARHEIGHT
DEFAULTCAPTIONHEIGHT	=	24
DEFAULTEDITBOXHEIGHT	=	24	;DEFAULTEDITBOXHEIGHT=DEFAULTBUTTONHEIGHT-CHARHEIGHT/2
;框架显示所用的常量
FRAME_LEFT	=	140
FRAME_TOP		=	120
FRAME_RIGHT	=	490
FRAME_BOTTOM	=	350
;-------------------------------------------------------------------------------
    .MODEL SMALL
    .386
    .STACK 200H
.DATA
;
STR_CAP			DB	'易思克  SYZERO VER1.00',00H
STR_NOPRIHD	DB	'硬盘不是主盘或不存在,请您确认!',00H
SOFTMESS1		DB	'本软件专为安装了SYBIOS软件的硬盘清除分区',00H
SOFTMESS2		DB	'仅供本公司测试人员用.----罗冰 2005-7-7',00H
DESTRMESS1	DB	'选择 "Y" 将破坏现有内外网分区',00H
DESTRMESS2	DB	'继续吗? (ENTER确认)  ',00H
SUCCESSMESS	DB	'恭喜,操作成功! 任意键返回.',00H
FAILMESS		DB	'意外失败,任意键返回.',00H
;
;===============================显示=======================================================================
;颜色寄存器&&ASCII表&&汉字表
;;颜色寄存器的填充值
PALETTEDATA	DB	0 ,0, 0				;BLACK
						DB	255,255,255		;WHITE
						DB	212,208,200		;LIGHT	GRAY
						DB	18,95,167			;DEEP	BLUE
						DB	64,64,64			;DARK	BLACK
						DB	128,128,128		;LIGHT	BLACK
						DB	255,255,0			;YELLOW
						DB	0,153,0				;GREEN
						DB	153,0,0				;RED
						DB	0,0,192				;BLUE
XCUR				DW	00H						;当前光标的坐标，2005-6-30
YCUR				DW	00H			
ASCIITABLE	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  001H,000H,000H,07EH,081H,0A5H,081H,081H,0BDH,099H,081H,081H,07EH,000H,000H,000H,000H
						DB  002H,000H,000H,07EH,0FFH,0DBH,0FFH,0FFH,0C3H,0E7H,0FFH,0FFH,07EH,000H,000H,000H,000H
						DB  003H,000H,000H,000H,000H,06CH,0FEH,0FEH,0FEH,0FEH,07CH,038H,010H,000H,000H,000H,000H
						DB  004H,000H,000H,000H,000H,010H,038H,07CH,0FEH,07CH,038H,010H,000H,000H,000H,000H,000H
						DB  005H,000H,000H,000H,018H,03CH,03CH,0E7H,0E7H,0E7H,018H,018H,03CH,000H,000H,000H,000H
						DB  006H,000H,000H,000H,018H,03CH,07EH,0FFH,0FFH,07EH,018H,018H,03CH,000H,000H,000H,000H
						DB  007H,000H,000H,000H,000H,000H,000H,018H,03CH,03CH,018H,000H,000H,000H,000H,000H,000H
						DB  008H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0E7H,0C3H,0C3H,0E7H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
						DB  009H,000H,000H,000H,000H,000H,03CH,066H,042H,042H,066H,03CH,000H,000H,000H,000H,000H
						DB  00AH,0FFH,0FFH,0FFH,0FFH,0FFH,0C3H,099H,0BDH,0BDH,099H,0C3H,0FFH,0FFH,0FFH,0FFH,0FFH
						DB  00BH,000H,000H,01EH,00EH,01AH,032H,078H,0CCH,0CCH,0CCH,0CCH,078H,000H,000H,000H,000H
						DB  00CH,000H,000H,03CH,066H,066H,066H,066H,03CH,018H,07EH,018H,018H,000H,000H,000H,000H
						DB  00DH,000H,000H,03FH,033H,03FH,030H,030H,030H,030H,070H,0F0H,0E0H,000H,000H,000H,000H
						DB  00EH,000H,000H,07FH,063H,07FH,063H,063H,063H,063H,067H,0E7H,0E6H,0C0H,000H,000H,000H
						DB  00FH,000H,000H,000H,018H,018H,0DBH,03CH,0E7H,03CH,0DBH,018H,018H,000H,000H,000H,000H
						DB  010H,000H,080H,0C0H,0E0H,0F0H,0F8H,0FEH,0F8H,0F0H,0E0H,0C0H,080H,000H,000H,000H,000H
						DB  011H,000H,002H,006H,00EH,01EH,03EH,0FEH,03EH,01EH,00EH,006H,002H,000H,000H,000H,000H
						DB  012H,000H,000H,018H,03CH,07EH,018H,018H,018H,07EH,03CH,018H,000H,000H,000H,000H,000H
						DB  013H,000H,000H,066H,066H,066H,066H,066H,066H,066H,000H,066H,066H,000H,000H,000H,000H
						DB  014H,000H,000H,07FH,0DBH,0DBH,0DBH,07BH,01BH,01BH,01BH,01BH,01BH,000H,000H,000H,000H
						DB  015H,000H,07CH,0C6H,060H,038H,06CH,0C6H,0C6H,06CH,038H,00CH,0C6H,07CH,000H,000H,000H
						DB  016H,000H,000H,000H,000H,000H,000H,000H,000H,0FEH,0FEH,0FEH,0FEH,000H,000H,000H,000H
						DB  017H,000H,000H,018H,03CH,07EH,018H,018H,018H,07EH,03CH,018H,07EH,000H,000H,000H,000H
						DB  018H,000H,000H,018H,03CH,07EH,018H,018H,018H,018H,018H,018H,018H,000H,000H,000H,000H
						DB  019H,000H,000H,018H,018H,018H,018H,018H,018H,018H,07EH,03CH,018H,000H,000H,000H,000H
						DB  01AH,000H,000H,000H,000H,000H,018H,00CH,0FEH,00CH,018H,000H,000H,000H,000H,000H,000H
						DB  01BH,000H,000H,000H,000H,000H,030H,060H,0FEH,060H,030H,000H,000H,000H,000H,000H,000H
						DB  01CH,000H,000H,000H,000H,000H,000H,0C0H,0C0H,0C0H,0FEH,000H,000H,000H,000H,000H,000H
						DB  01DH,000H,000H,000H,000H,000H,028H,06CH,0FEH,06CH,028H,000H,000H,000H,000H,000H,000H
						DB  01EH,000H,000H,000H,000H,010H,038H,038H,07CH,07CH,0FEH,0FEH,000H,000H,000H,000H,000H
						DB  01FH,000H,000H,000H,000H,0FEH,0FEH,07CH,07CH,038H,038H,010H,000H,000H,000H,000H,000H
						DB  020H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  021H,000H,000H,018H,03CH,03CH,03CH,018H,018H,018H,000H,018H,018H,000H,000H,000H,000H
						DB  022H,000H,066H,066H,066H,024H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  023H,000H,000H,000H,06CH,06CH,0FEH,06CH,06CH,06CH,0FEH,06CH,06CH,000H,000H,000H,000H
						DB  024H,018H,018H,07CH,0C6H,0C2H,0C0H,07CH,006H,006H,086H,0C6H,07CH,018H,018H,000H,000H
						DB  025H,000H,000H,000H,000H,0C2H,0C6H,00CH,018H,030H,060H,0C6H,086H,000H,000H,000H,000H
						DB  026H,000H,000H,038H,06CH,06CH,038H,076H,0DCH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  027H,000H,030H,030H,030H,060H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  028H,000H,000H,00CH,018H,030H,030H,030H,030H,030H,030H,018H,00CH,000H,000H,000H,000H
						DB  029H,000H,000H,030H,018H,00CH,00CH,00CH,00CH,00CH,00CH,018H,030H,000H,000H,000H,000H
						DB  02AH,000H,000H,000H,000H,000H,066H,03CH,0FFH,03CH,066H,000H,000H,000H,000H,000H,000H
						DB  02BH,000H,000H,000H,000H,000H,018H,018H,07EH,018H,018H,000H,000H,000H,000H,000H,000H
						DB  02CH,000H,000H,000H,000H,000H,000H,000H,000H,000H,018H,018H,018H,030H,000H,000H,000H
						DB  02DH,000H,000H,000H,000H,000H,000H,000H,0FEH,000H,000H,000H,000H,000H,000H,000H,000H
						DB  02EH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,018H,018H,000H,000H,000H,000H
						DB  02FH,000H,000H,000H,000H,002H,006H,00CH,018H,030H,060H,0C0H,080H,000H,000H,000H,000H
						DB  030H,000H,000H,038H,06CH,0C6H,0C6H,0D6H,0D6H,0C6H,0C6H,06CH,038H,000H,000H,000H,000H
						DB  031H,000H,000H,018H,038H,078H,018H,018H,018H,018H,018H,018H,07EH,000H,000H,000H,000H
						DB  032H,000H,000H,07CH,0C6H,006H,00CH,018H,030H,060H,0C0H,0C6H,0FEH,000H,000H,000H,000H
						DB  033H,000H,000H,07CH,0C6H,006H,006H,03CH,006H,006H,006H,0C6H,07CH,000H,000H,000H,000H
						DB  034H,000H,000H,00CH,01CH,03CH,06CH,0CCH,0FEH,00CH,00CH,00CH,01EH,000H,000H,000H,000H
						DB  035H,000H,000H,0FEH,0C0H,0C0H,0C0H,0FCH,006H,006H,006H,0C6H,07CH,000H,000H,000H,000H
						DB  036H,000H,000H,038H,060H,0C0H,0C0H,0FCH,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  037H,000H,000H,0FEH,0C6H,006H,006H,00CH,018H,030H,030H,030H,030H,000H,000H,000H,000H
						DB  038H,000H,000H,07CH,0C6H,0C6H,0C6H,07CH,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  039H,000H,000H,07CH,0C6H,0C6H,0C6H,07EH,006H,006H,006H,00CH,078H,000H,000H,000H,000H
						DB  03AH,000H,000H,000H,000H,018H,018H,000H,000H,000H,018H,018H,000H,000H,000H,000H,000H
						DB  03BH,000H,000H,000H,000H,018H,018H,000H,000H,000H,018H,018H,030H,000H,000H,000H,000H
						DB  03CH,000H,000H,000H,006H,00CH,018H,030H,060H,030H,018H,00CH,006H,000H,000H,000H,000H
						DB  03DH,000H,000H,000H,000H,000H,07EH,000H,000H,07EH,000H,000H,000H,000H,000H,000H,000H
						DB  03EH,000H,000H,000H,060H,030H,018H,00CH,006H,00CH,018H,030H,060H,000H,000H,000H,000H
						DB  03FH,000H,000H,07CH,0C6H,0C6H,00CH,018H,018H,018H,000H,018H,018H,000H,000H,000H,000H
						DB  040H,000H,000H,000H,07CH,0C6H,0C6H,0DEH,0DEH,0DEH,0DCH,0C0H,07CH,000H,000H,000H,000H
						DB  041H,000H,000H,010H,038H,06CH,0C6H,0C6H,0FEH,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  042H,000H,000H,0FCH,066H,066H,066H,07CH,066H,066H,066H,066H,0FCH,000H,000H,000H,000H
						DB  043H,000H,000H,03CH,066H,0C2H,0C0H,0C0H,0C0H,0C0H,0C2H,066H,03CH,000H,000H,000H,000H
						DB  044H,000H,000H,0F8H,06CH,066H,066H,066H,066H,066H,066H,06CH,0F8H,000H,000H,000H,000H
						DB  045H,000H,000H,0FEH,066H,062H,068H,078H,068H,060H,062H,066H,0FEH,000H,000H,000H,000H
						DB  046H,000H,000H,0FEH,066H,062H,068H,078H,068H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  047H,000H,000H,03CH,066H,0C2H,0C0H,0C0H,0DEH,0C6H,0C6H,066H,03AH,000H,000H,000H,000H
						DB  048H,000H,000H,0C6H,0C6H,0C6H,0C6H,0FEH,0C6H,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  049H,000H,000H,03CH,018H,018H,018H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  04AH,000H,000H,01EH,00CH,00CH,00CH,00CH,00CH,0CCH,0CCH,0CCH,078H,000H,000H,000H,000H
						DB  04BH,000H,000H,0E6H,066H,066H,06CH,078H,078H,06CH,066H,066H,0E6H,000H,000H,000H,000H
						DB  04CH,000H,000H,0F0H,060H,060H,060H,060H,060H,060H,062H,066H,0FEH,000H,000H,000H,000H
						DB  04DH,000H,000H,0C6H,0EEH,0FEH,0FEH,0D6H,0C6H,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  04EH,000H,000H,0C6H,0E6H,0F6H,0FEH,0DEH,0CEH,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  04FH,000H,000H,07CH,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  050H,000H,000H,0FCH,066H,066H,066H,07CH,060H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  051H,000H,000H,07CH,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0D6H,0DEH,07CH,00CH,00EH,000H,000H
						DB  052H,000H,000H,0FCH,066H,066H,066H,07CH,06CH,066H,066H,066H,0E6H,000H,000H,000H,000H
						DB  053H,000H,000H,07CH,0C6H,0C6H,060H,038H,00CH,006H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  054H,000H,000H,07EH,07EH,05AH,018H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  055H,000H,000H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  056H,000H,000H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,06CH,038H,010H,000H,000H,000H,000H
						DB  057H,000H,000H,0C6H,0C6H,0C6H,0C6H,0D6H,0D6H,0D6H,0FEH,0EEH,06CH,000H,000H,000H,000H
						DB  058H,000H,000H,0C6H,0C6H,06CH,07CH,038H,038H,07CH,06CH,0C6H,0C6H,000H,000H,000H,000H
						DB  059H,000H,000H,066H,066H,066H,066H,03CH,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  05AH,000H,000H,0FEH,0C6H,086H,00CH,018H,030H,060H,0C2H,0C6H,0FEH,000H,000H,000H,000H
						DB  05BH,000H,000H,03CH,030H,030H,030H,030H,030H,030H,030H,030H,03CH,000H,000H,000H,000H
						DB  05CH,000H,000H,000H,080H,0C0H,0E0H,070H,038H,01CH,00EH,006H,002H,000H,000H,000H,000H
						DB  05DH,000H,000H,03CH,00CH,00CH,00CH,00CH,00CH,00CH,00CH,00CH,03CH,000H,000H,000H,000H
						DB  05EH,010H,038H,06CH,0C6H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  05FH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,0FFH,000H,000H
						DB  060H,030H,030H,018H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  061H,000H,000H,000H,000H,000H,078H,00CH,07CH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  062H,000H,000H,0E0H,060H,060H,078H,06CH,066H,066H,066H,066H,07CH,000H,000H,000H,000H
						DB  063H,000H,000H,000H,000H,000H,07CH,0C6H,0C0H,0C0H,0C0H,0C6H,07CH,000H,000H,000H,000H
						DB  064H,000H,000H,01CH,00CH,00CH,03CH,06CH,0CCH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  065H,000H,000H,000H,000H,000H,07CH,0C6H,0FEH,0C0H,0C0H,0C6H,07CH,000H,000H,000H,000H
						DB  066H,000H,000H,038H,06CH,064H,060H,0F0H,060H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  067H,000H,000H,000H,000H,000H,076H,0CCH,0CCH,0CCH,0CCH,0CCH,07CH,00CH,0CCH,078H,000H
						DB  068H,000H,000H,0E0H,060H,060H,06CH,076H,066H,066H,066H,066H,0E6H,000H,000H,000H,000H
						DB  069H,000H,000H,018H,018H,000H,038H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  06AH,000H,000H,006H,006H,000H,00EH,006H,006H,006H,006H,006H,006H,066H,066H,03CH,000H
						DB  06BH,000H,000H,0E0H,060H,060H,066H,06CH,078H,078H,06CH,066H,0E6H,000H,000H,000H,000H
						DB  06CH,000H,000H,038H,018H,018H,018H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  06DH,000H,000H,000H,000H,000H,0ECH,0FEH,0D6H,0D6H,0D6H,0D6H,0C6H,000H,000H,000H,000H
						DB  06EH,000H,000H,000H,000H,000H,0DCH,066H,066H,066H,066H,066H,066H,000H,000H,000H,000H
						DB  06FH,000H,000H,000H,000H,000H,07CH,0C6H,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  070H,000H,000H,000H,000H,000H,0DCH,066H,066H,066H,066H,066H,07CH,060H,060H,0F0H,000H
						DB  071H,000H,000H,000H,000H,000H,076H,0CCH,0CCH,0CCH,0CCH,0CCH,07CH,00CH,00CH,01EH,000H
						DB  072H,000H,000H,000H,000H,000H,0DCH,076H,066H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  073H,000H,000H,000H,000H,000H,07CH,0C6H,060H,038H,00CH,0C6H,07CH,000H,000H,000H,000H
						DB  074H,000H,000H,010H,030H,030H,0FCH,030H,030H,030H,030H,036H,01CH,000H,000H,000H,000H
						DB  075H,000H,000H,000H,000H,000H,0CCH,0CCH,0CCH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  076H,000H,000H,000H,000H,000H,066H,066H,066H,066H,066H,03CH,018H,000H,000H,000H,000H
						DB  077H,000H,000H,000H,000H,000H,0C6H,0C6H,0D6H,0D6H,0D6H,0FEH,06CH,000H,000H,000H,000H
						DB  078H,000H,000H,000H,000H,000H,0C6H,06CH,038H,038H,038H,06CH,0C6H,000H,000H,000H,000H
						DB  079H,000H,000H,000H,000H,000H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,07EH,006H,00CH,0F8H,000H
						DB  07AH,000H,000H,000H,000H,000H,0FEH,0CCH,018H,030H,060H,0C6H,0FEH,000H,000H,000H,000H
						DB  07BH,000H,000H,00EH,018H,018H,018H,070H,018H,018H,018H,018H,00EH,000H,000H,000H,000H
						DB  07CH,000H,000H,018H,018H,018H,018H,000H,018H,018H,018H,018H,018H,000H,000H,000H,000H
						DB  07DH,000H,000H,070H,018H,018H,018H,00EH,018H,018H,018H,018H,070H,000H,000H,000H,000H
						DB  07EH,000H,000H,076H,0DCH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  07FH,000H,000H,000H,000H,010H,038H,06CH,0C6H,0C6H,0C6H,0FEH,000H,000H,000H,000H,000H
						DB  080H,000H,000H,03CH,066H,0C2H,0C0H,0C0H,0C0H,0C2H,066H,03CH,00CH,006H,07CH,000H,000H
						;DB  0FFH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						;注意，此ACSII码经过改动，主要用来清除当前显示的字符
						DB  0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
HZK16TABLE	DW  0d7d2H,0f01fH,01010H,01010H,0f01fH,01010H,01010H,0f01fH,00408H,0fe1fH,04424H,04444H,08488H,08410H,00421H,02802H,01004H
						DW  0bccbH,00800H,0fc3fH,00821H,00821H,00821H,0f83fH,00821H,00821H,00821H,0f83fH,00820H,00002H,08851H,09650H,01290H,0f00fH
						DW  0cbbfH,00001H,00401H,0feffH,00001H,01001H,0f81fH,01010H,01010H,01010H,0f01fH,05014H,04004H,04004H,04208H,04210H,03e60H
						DW  0b2d3H,00404H,0feffH,02010H,02410H,0fe21H,02425H,0247fH,0fca5H,02425H,02425H,0fc25H,02024H,0a03dH,06024H,09e00H,00403H
						DW  0ccc5H,01002H,0f81fH,01010H,01012H,01411H,0feffH,01010H,01012H,05021H,02040H,0f83fH,04824H,04824H,04824H,0feffH,00000H
						DW  0bbb2H,00400H,0feffH,08000H,08000H,00001H,00001H,04003H,02005H,01809H,00c11H,00421H,00041H,00001H,00001H,00001H,00001H
						DW  0c7caH,0e00fH,02008H,02008H,0e00fH,02008H,02008H,0e00fH,00400H,0feffH,00001H,02009H,0f009H,00009H,00015H,00623H,0fc40H
						DW  0f7d6H,00002H,00001H,00801H,0fc7fH,00001H,00001H,00001H,01001H,0f83fH,00001H,00001H,00001H,00001H,00401H,0feffH,00000H
						DW  0f2bbH,05000H,04800H,04000H,0feffH,04000H,04002H,0483fH,04822H,04822H,05022H,0503eH,02020H,02207H,05278H,08a00H,00403H
						DW  0e6b4H,00002H,00402H,0feffH,00004H,00008H,0f80bH,01010H,02010H,04430H,0fe5fH,04090H,04010H,04010H,04010H,04011H,08010H
						DW  0dad4H,00002H,00002H,00402H,0feffH,00004H,04004H,04008H,05008H,0f813H,04030H,04050H,04090H,04010H,04410H,0fe17H,00010H
						DW  0ebc7H,04800H,0fc47H,04020H,0f823H,04000H,0feefH,00820H,0fc23H,00822H,0f823H,00822H,0f823H,0082aH,00832H,02822H,01002H
						DW  0fac4H,00009H,00009H,0fc13H,00412H,04834H,04059H,05091H,04c12H,04414H,04011H,08010H,00002H,08451H,09250H,01290H,0f00fH
						DW  0b7c8H,04000H,04004H,078feH,09010H,02411H,0fe23H,02425H,0247dH,0fca5H,02425H,02425H,0fc25H,02425H,0243dH,02422H,00c04H
						DW  0cfc8H,04000H,04040H,04030H,04010H,04000H,04000H,0a0f0H,0a010H,0a010H,01011H,01011H,01015H,0081aH,00812H,00604H,00408H
						DW  0beb1H,00001H,00001H,00001H,00801H,0fc7fH,04005H,04005H,04005H,02009H,02009H,01011H,0ee2fH,004c1H,00001H,00001H,00001H
						DW  0edc8H,04010H,04010H,04014H,07cfeH,08420H,00829H,02048H,0207eH,02008H,02008H,0500eH,050f8H,08848H,08808H,00609H,0040aH
						DW  0febcH,04010H,04010H,04012H,04822H,0fc23H,04064H,040a4H,04028H,04420H,0fe3fH,04020H,04020H,04020H,04020H,04020H,04020H
						DW  0a8d7H,00001H,00001H,01001H,0f83fH,00002H,00402H,0feffH,00004H,00004H,0f80fH,01000H,02000H,04000H,08006H,08001H,04000H
						DW  0aaceH,08000H,08010H,0800cH,08004H,08400H,0feffH,00401H,00401H,00402H,08402H,06404H,02408H,00410H,00420H,02840H,01000H
						DW  0b2b0H,00002H,00001H,0fe7fH,00240H,00482H,00002H,00402H,0feffH,02004H,02008H,02018H,04006H,08001H,04002H,0300cH,01030H
						DW  0b0d7H,04008H,04848H,0fc2bH,04008H,05018H,0f829H,0004aH,00409H,0feffH,00802H,09004H,0a00cH,04014H,03065H,00e06H,00404H
						DW  0cbc1H,00000H,0f87fH,01000H,02000H,04000H,08001H,00001H,00001H,00001H,00001H,00001H,00001H,00001H,00001H,00005H,00002H
						DW  0c4b5H,04010H,04010H,04422H,07e7fH,08442H,00443H,00442H,08442H,0647eH,02442H,00442H,00442H,00442H,0047eH,02842H,01000H
						DW  0e5c7H,04000H,04840H,0fc37H,04010H,0f883H,04060H,0fe2fH,00808H,0fc13H,00822H,0f8e3H,00822H,0f823H,00822H,02822H,01022H
						DW  0fdb3H,04000H,04078H,0a048H,0a050H,01051H,00e62H,0f455H,04048H,05048H,0fc4fH,04068H,05051H,04c42H,04444H,04041H,08040H
						DW  0d6b7H,08000H,08004H,04004H,04008H,02008H,01010H,00820H,0ee4fH,02484H,02004H,02004H,02004H,02004H,02008H,04011H,08020H
						DW  0f8c7H,00800H,0fc3fH,00020H,00828H,01824H,02022H,04021H,08020H,04021H,03022H,01824H,00828H,00020H,00420H,0fe3fH,00000H
						DW  0c3d3H,00800H,0fc3fH,00821H,00821H,00821H,0f83fH,00821H,00821H,00821H,0f83fH,00821H,00821H,00821H,00841H,02841H,01080H
						DW  0f6bdH,00008H,00408H,0fe0bH,00410H,00411H,00431H,00851H,00891H,08810H,09010H,05010H,02010H,05010H,08810H,00611H,00416H
						DW  0a9b9H,01012H,01012H,01012H,01022H,0fc2fH,01062H,010a2H,01022H,01422H,0fe3fH,00020H,01022H,00822H,00c24H,00428H,00020H
						DW  0abb9H,00000H,08000H,08004H,04004H,04008H,02008H,01011H,00e21H,004c2H,00002H,00004H,04008H,02010H,0f01fH,01000H,00000H
						DW  0becbH,00800H,0fc3fH,00800H,04800H,0e8ffH,00800H,08800H,0c83fH,08820H,08820H,08820H,08820H,0883fH,08820H,02800H,01000H
						DW  0e2b2H,00000H,04440H,0e427H,05424H,05485H,05465H,05425H,0540dH,05415H,05425H,054e5H,00421H,08422H,04424H,05428H,00820H
						DW  0d4caH,02000H,02840H,02420H,02020H,0fe0fH,02000H,020e0H,0e027H,02021H,01021H,01021H,01021H,0d229H,01237H,00a22H,00400H
						DW  0cbc8H,00001H,00001H,00001H,00001H,00001H,00001H,00001H,08002H,08002H,08002H,04004H,04004H,02008H,01010H,00e20H,00440H
						DW  0b1d4H,01000H,0f81fH,01010H,01010H,0f01fH,00800H,0fc3fH,00820H,00821H,00821H,00821H,00821H,00822H,06004H,01818H,00460H
						DW  0dec2H,00400H,0fe7fH,04444H,04444H,04444H,0fc7fH,00442H,00002H,0f007H,01008H,02014H,0c062H,00001H,00006H,00018H,000e0H
						DW  0f9b1H,08000H,08040H,08430H,08c10H,09000H,0a00fH,0c011H,0c012H,0a022H,090e4H,08824H,08e28H,08430H,08020H,08022H,00021H
						DW  0a1d1H,04000H,04042H,04832H,0fc13H,04002H,04404H,0fef7H,0a010H,0a010H,0a010H,02211H,02211H,01e12H,0002cH,00644H,0fc03H
						DW  0f1d4H,00010H,0f813H,01011H,0a010H,040fcH,0a010H,01015H,04e1aH,0f435H,040d0H,04810H,0fc17H,04010H,04010H,04050H,04020H
						DW  0abbdH,08010H,08010H,0f811H,00891H,01073H,0a034H,04010H,09410H,0fe1fH,01030H,01052H,090d1H,09010H,01010H,05010H,02010H
						DW  0c6c6H,02000H,02008H,020fcH,0fe13H,02212H,02422H,02022H,0fc7bH,084aaH,0882aH,0482aH,0502aH,0203cH,05024H,08e08H,00413H
						DW  0b5bbH,00020H,00420H,0fe2fH,02020H,020f8H,04020H,04020H,0d020H,04c21H,0462aH,04234H,040e8H,04040H,04000H,04000H,04000H
						DW  0d6cfH,00800H,0fc09H,008fdH,02811H,02811H,02811H,02811H,0487dH,04811H,04811H,04010H,0a01cH,0a0f0H,02241H,02202H,01e0cH
						DW  0d0d3H,00002H,00402H,0feffH,00004H,01004H,0f80fH,01008H,01018H,0f02fH,01048H,01088H,0f00fH,01008H,01008H,05008H,02008H
						DW  0dac4H,00001H,00001H,00001H,00401H,0fe7fH,00441H,00441H,00442H,08442H,06444H,03448H,01450H,00440H,00440H,01440H,00840H
						DW  0e2cdH,04008H,04008H,04008H,04010H,0401fH,06021H,05021H,04862H,04692H,0420aH,04004H,04008H,04010H,04020H,04040H,04000H
						DW  0f8cdH,00400H,0fe7fH,00440H,00c42H,08c62H,05454H,05454H,02448H,02448H,05454H,04c52H,08c62H,00461H,00442H,01440H,00840H
						DW  0ccbcH,02010H,02012H,02022H,02423H,0ac4aH,070faH,02012H,0fc23H,02042H,070faH,0ac42H,02403H,0201aH,024e2H,0fe43H,00000H
						DW  0f8d0H,04010H,05010H,0f823H,04020H,04048H,0fcffH,02411H,0a820H,02042H,024f9H,0fe07H,04000H,0601cH,090e0H,00c41H,00402H
						DW  0f0c2H,01000H,0f80bH,0107cH,01049H,01049H,01049H,01049H,01449H,0fe49H,00448H,02448H,0f47fH,00448H,00400H,01400H,00800H
						DW  0a7b9H,02008H,02808H,0fc7fH,02008H,02408H,0feffH,04004H,02009H,01011H,00e21H,024c9H,09009H,04811H,00821H,00005H,00002H
						DW  0b2cfH,00801H,0fc7fH,00001H,0f83fH,00000H,0f01fH,01010H,0f01fH,04404H,0feffH,01000H,0f81fH,01010H,01010H,0f01fH,01010H
						DW  0d9b2H,01010H,0f811H,01011H,0f011H,004fcH,0be17H,0a414H,0bc1fH,04030H,044d0H,0fe1fH,0e010H,05011H,04e12H,04454H,04020H
						DW  0f7d7H,00009H,00009H,00409H,0fe11H,08012H,08032H,09054H,0f898H,08010H,08010H,08810H,0fc10H,08010H,08010H,08010H,08010H
						DW  0c9b3H,08000H,0a000H,09000H,0fc3fH,08020H,08020H,08420H,0443eH,04822H,04822H,03022H,0202aH,06224H,09240H,00a81H,00600H
						DW  0a6b9H,08000H,08000H,08008H,080fcH,08410H,0fe17H,08410H,08410H,08410H,08410H,0041dH,004f1H,00441H,04402H,02804H,01008H
						DW  0cec8H,00008H,01808H,0e00bH,04010H,04010H,04030H,04450H,0fe9fH,04010H,04010H,04010H,04010H,04810H,0fc17H,00010H,00010H
						DW  0e2d2H,01001H,0f83fH,02008H,04404H,0feffH,01000H,0f81fH,01010H,0f01fH,01010H,0f01fH,00002H,08451H,09250H,01290H,0f00fH
						DW  0fcbcH,01020H,01027H,07c39H,01441H,0fe82H,0147aH,07c24H,01027H,07cf9H,01021H,01425H,0fe22H,0102aH,01035H,09628H,07c00H
						DW  0a7caH,00001H,00011H,00011H,01011H,0f81fH,00021H,00041H,00401H,0feffH,00001H,08002H,08002H,04004H,03008H,00e10H,00460H
						DW  0dcb0H,04004H,0407eH,04444H,07e54H,08854H,00855H,04854H,04854H,04854H,05054H,05054H,02010H,05028H,08e24H,00445H,00082H
						DW  0b5b7H,00800H,01c40H,0e033H,00012H,00002H,0f802H,008f2H,09012H,05012H,02012H,05012H,08c14H,00415H,00028H,00644H,0fc03H
						DW  0d8bbH,00000H,00400H,0fe7fH,00440H,04440H,0e447H,04444H,04444H,04444H,04444H,0c447H,04444H,00440H,0fc7fH,00440H,00000H
						DW  0d8bbH,00000H,00400H,0fe7fH,00440H,04440H,0e447H,04444H,04444H,04444H,04444H,0c447H,04444H,00440H,0fc7fH,00440H,00000H
;
;===============================硬盘==================================================================
MBRBUFFER		DB	512 DUP(0)
;扩展驱动器参数
;48H	Extended DRIVE PARAMETERS
EDPARA_TABLE				DW	0040H			;缓冲区大小，大于30才可能返回EDD
			EDPARA_FLAG		DW	00H				;信息标志
			EDPARA_CYL		DD	00H				;可寻址磁柱的块数
			EDPARA_HEADS	DD	00H				;可寻址磁头总数
			EDPARA_SECS		DD	00H				;每磁道的扇区数
			EDPARA_TOTAL	DD	00H				;可寻址的扇区总数（低位），最大可表示2048G
										DD	00H				;我想,在本程序有效期内还用不到高位，所以没有定义高位
			EDPARA_PERSEC	DW	00H				;每磁道的扇区数
			EDD_OFFSET		DW	00H				;指向增强的磁盘驱动器配置参数的偏移(Enhanced Disk Drive/ configuration parameters)
			EDD_SEG				DW	00H				;															 段址
;EDD_TABLE												;Enhanced Disk Drive/ configuration parameters
			EDD_BASEPORT	DW	00H
			EDD_CTRLPORT	DW	00H
			EDD_DRVFLAGS	DB	00H				;drive flags
			EDD_PRINFO		DB	00H				;proprietary information
			EDD_IRQ				DB	00H				;IRQ for drive
			EDD_TRANSECS	DB	00H				;sector count for multi-sector transfers
			EDD_DMA				DB	00H 			;DMA control	
			EDD_IOCTRL		DB	00H				;programmed I/O control
 			EDD_DRVOPTION	DW	00H				;drive options
			EDD_RESERVED	DW	00H				;2 BYTEs	reserved (0)
			EDD_EVERSION	DB	00H				;extension revision level		
			EDD_CHECKSUM	DB	00H				;2's complement checksum of bytes 00h-0Eh
;扩展磁盘服务的磁盘地址包
;42h 43h   Extended	Disk Address Packet
EDAP_TABLE					DB	10H				;包的大小
			EDAP_RESERVE1	DB	00H				;保留
			EDAP_RWCOUNT	DB	00H				;要读写的扇区数	1~127
			EDAP_RESERVE2	DB	00H				;保留
			EDAP_OFFSET		DW	00H				;传送的内存偏移
			EDAP_SEG			DW	00H				;传送的内存段址
			EDAP_RWLBAL		DW	00H				;欲读写逻辑扇区（低位）
			EDAP_RWLBAH		DW	00H				;												 （高位）
;对双网的offset的值
OFFSETVAL						DD	00H
MYOFFSETVAL					DD	00H				;对OS不可见的OFFSET区域，gcd.zone[7]
PART_MAXLBA					DD	00H				;每个网的最大可用磁盘空间（内外）
;
;;===============================EPPROM中的数据 结构==================================================================
;CARD_DATA		;单片机中EPPROM的数据
	NEI_OFFSET						DD	00H			;NEI	OFFSET
												DD	00H			;NEI	FRONT
												DD	00H			;NEI	BEHIND
	NEI_MAX								DD	00H			;NEI	MAX
	WAI_OFFSET						DD	00H			;WAI	OFFSET
												DD	00H			;WAI	FRONT
												DD	00H			;WAI	BEHIND
	WAI_MAX								DD	00H			;WAI	MAX
												DB	80 DUP(0) 
	MYZONE_OFFSET					DD	00H			;MYZONE	OFFSET
												DD	00H			;MYZONE	FRONT
												DD	00H			;MYZONE	BEHIND
	MYZONE_MAX						DD	00H			;MYZONE	MAX
	NRZONE								DB	02H			;OS NUMBER
	NRHEAD								DB	10H			
	CD_SECPERCYL					DB	03FH
	B_SWAP								DB	00H
	CD_RESERVED						DB	122 DUP (0)	;[16*16-8*16-4-2]
	CD_SIG								DW	0A55AH
ENDDATA									DW  0AA55H						;结束标志
;-----------------------------------------------------
.CODE
START:
	MOV	AX,@DATA
	MOV	DS,AX	
	;;;;
	CALL	MAIN_MOUDLE
	;
	MOV	AX,4C00H
	INT	21H
;
;+++++++++++++子程序+++++++++++++++++
MAIN_MOUDLE	PROC	NEAR
;
	;显示的初始化工作
	CALL	INITVIDEO				;显示模式及颜色寄存器准备完毕
	;;;;;;;;;;;;;;;
	;读硬盘的基本属性
	CALL	RESETDISK
	CALL	GETDISKATTR
	JC	NOPRIHD					;提示错误 ##error1
	CALL	CALOFFSET
	;
	CALL	DISP_FRAME
	;
	CALL	DISP_TITLE		;提示只供测试用
	CALL	GETSELECT			;任意键返回
	;
	MOV	DX,OFFSET DESTRMESS1
	CALL	DISP_SETUP
	CMP	AL,'Y'
	JZ	DESTROY_HD			;破坏硬盘分区,##MOUDLE1
	JMP	MAIN_MOUDLE_EXIT
	;
DESTROY_HD:						;##MOUDLE1
	CALL	FILLMBR
	CMP	AL,1						;写成功的话，显示
	JNZ	DESTROY_FAIL		;写失败 ##error2
	MOV	DX,OFFSET SUCCESSMESS
	CALL	DISP_ERROR
	CALL	GETSELECT			;按任意键退出
	JMP	MAIN_MOUDLE_EXIT
JUDGE_OK_ORNOT:
	MOV	DX,OFFSET FAILMESS
	CALL	DISP_ERROR
	CALL	GETSELECT
	JMP	MAIN_MOUDLE_EXIT
;
NOPRIHD:												;##error1
	MOV	DX,OFFSET STR_NOPRIHD
	CALL	DISP_ERROR
	CALL	GETSELECT
	JMP	MAIN_MOUDLE_EXIT	
;
DESTROY_FAIL:
	MOV	DX,OFFSET FAILMESS
	CALL	DISP_ERROR
	CALL	GETSELECT
	JMP	MAIN_MOUDLE_EXIT
MAIN_MOUDLE_EXIT:
	MOV	AX,03H
	INT	10H
	RET
MAIN_MOUDLE	ENDP
	
;--------------------------显示部分--------------------------
;****************************************************;
;*子程序名：	DISP_ERROR														**
;*功能：			显示无效硬盘													**
;*入口参数：	DX=错误信息的地址											**
;*出口参数：																				**
;*使用说明：  																			**
;****************************************************;
DISP_ERROR	PROC	NEAR
	PUSH	DX
	PUSH	BP
	MOV	BP,SP
	CALL	DISP_FRAME
	MOV	AX,RED						;显示字的颜色
	PUSH	AX
	;取字符串的地址
	MOV	AX,WORD PTR [BP+2]	;显示字
	PUSH	AX
	MOV	BX,FRAME_BOTTOM
	MOV	AX,FRAME_TOP
	SUB	BX,AX
	SHR	BX,1
	ADD	AX,BX
	SUB	AX,8								;字符高度是16，取一半
	PUSH	AX								;计算字符串的坐标 Y 值
	;取字符串地址
	MOV	AX,WORD PTR [BP+2]					;计算字符串的坐标 X 值
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	CX,FRAME_LEFT
	MOV	DX,FRAME_RIGHT
	SUB	DX,CX
	SUB	DX,AX
	SHR	DX,1
	ADD	DX,CX
	MOV	AX,DX			
	PUSH	AX
	CALL	PUTSTR
	ADD	SP,8	
	;
	MOV	SP,BP
	POP	BP
	POP	DX
	RET
DISP_ERROR	ENDP
;****************************************************;
;*子程序名：	DISP_TITLE														**
;*功能：			显示软件说明信息											**
;*入口参数：																				**
;*出口参数：																				**
;*使用说明：  																			**
;****************************************************;
DISP_TITLE	PROC	NEAR
	CALL	DISP_FRAME
	MOV	AX,RED						;显示字的颜色
	PUSH	AX
	;取字符串的地址
	MOV	AX,OFFSET SOFTMESS1	;显示字
	PUSH	AX
	MOV	BX,FRAME_BOTTOM
	MOV	AX,FRAME_TOP
	SUB	BX,AX
	SHR	BX,1
	ADD	AX,BX
	SUB	AX,24								;字符高度是16，取一个半
	PUSH	AX								;计算字符串的坐标 Y 值
	;取字符串地址
	MOV	AX,OFFSET SOFTMESS1					;计算字符串的坐标 X 值
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	CX,FRAME_LEFT
	MOV	DX,FRAME_RIGHT
	SUB	DX,CX
	SUB	DX,AX
	SHR	DX,1
	ADD	DX,CX
	MOV	AX,DX			
	PUSH	AX
	CALL	PUTSTR
	PUSH	BP
	MOV	BP,SP
	MOV	DX,[BP+2]					;X
	MOV	BX,[BP+4]					;Y
	POP	BP
	ADD	SP,8
	;
	MOV	AX,RED
	PUSH	AX
	MOV	AX,OFFSET SOFTMESS2
	PUSH	AX
	ADD	BX,32
	PUSH	BX					;Y
	MOV	YCUR,BX
	PUSH	DX					;X
	MOV	XCUR,DX
	CALL	PUTSTR
	ADD	SP,8
	;
	RET
DISP_TITLE	ENDP
;****************************************************;
;*子程序名：	DISP_FRAME														**
;*功能：			显示主框架														**
;*入口参数：	无																		**
;*出口参数：																				**
;*使用说明：  框架的位置是自由调整的，看PUTWINDOW的	**
;*						函数说明															**
;****************************************************;
DISP_FRAME	PROC	NEAR
	;设置窗口及标题栏
	MOV	AX,WHITE
	PUSH	AX
	MOV	DX,OFFSET	STR_CAP			;设置标题
	PUSH	DX
	MOV	AX,LIGHTGRAY
	PUSH	AX
	MOV	AX,FRAME_BOTTOM						;BOTTOM
	PUSH	AX
	MOV	AX,FRAME_RIGHT						;RIGHT
	PUSH	AX
	MOV	AX,FRAME_TOP						;TOP
	PUSH	AX
	MOV	AX,FRAME_LEFT						;LEFT
	PUSH	AX
	CALL	PUTWINDOW
	ADD	SP,14
	RET
DISP_FRAME	ENDP
;****************************************************;
;*子程序名：	DISP_SETUP														**
;*功能：			显示安装界面													**
;*入口参数：	DX=显示的第一行字符串的地址						**
;*出口参数：																				**
;*使用说明：  																			**
;****************************************************;
DISP_SETUP	PROC	NEAR
	PUSH	DX
	PUSH	BP
	MOV	BP,SP 						;[BP+2]=显示第一行的字符串地址
	CALL	DISP_FRAME
	MOV	AX,RED						;显示字的颜色
	PUSH	AX
	;取字符串的地址
	MOV	AX,WORD PTR [BP+2]	;显示字
	PUSH	AX
	MOV	BX,FRAME_BOTTOM
	MOV	AX,FRAME_TOP
	SUB	BX,AX
	SHR	BX,1
	ADD	AX,BX
	SUB	AX,24								;字符高度是16，取一个半
	PUSH	AX								;计算字符串的坐标 Y 值
	;取字符串地址
	MOV	AX,WORD PTR [BP+2]					;计算字符串的坐标 X 值
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	CX,FRAME_LEFT
	MOV	DX,FRAME_RIGHT
	SUB	DX,CX
	SUB	DX,AX
	SHR	DX,1
	ADD	DX,CX
	MOV	AX,DX			
	PUSH	AX
	CALL	PUTSTR
	PUSH	BP
	MOV	BP,SP
	MOV	DX,[BP+2]					;X
	MOV	BX,[BP+4]					;Y
	POP	BP
	ADD	SP,8
	;
	MOV	AX,RED
	PUSH	AX
	MOV	AX,OFFSET DESTRMESS2
	PUSH	AX
	ADD	BX,32
	PUSH	BX					;Y
	MOV	YCUR,BX
	PUSH	DX					;X
	MOV	XCUR,DX
	CALL	PUTSTR
	ADD	SP,8
	;
	MOV	AX,OFFSET DESTRMESS2
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	DX,XCUR
	ADD	DX,AX
	MOV	XCUR,DX
	MOV	BX,YCUR
	;显示编辑框
	MOV	AX,2
	PUSH	AX
	PUSH	BX
	PUSH	DX
	CALL	PUTEDITBOX
	ADD	SP,6
	;接受用户输入
	CALL	GETUSERIN
	MOV	SP,BP
	POP	BP
	POP	DX
	RET
DISP_SETUP	ENDP
;****************************************************;
;*子程序名：	GETUSERIN															**
;*功能：			获取用户的输入,显示										**
;*入口参数：																				**
;*出口参数：	al='Y' 	or	al='N'										**
;****************************************************;	 	
GETUSERIN	PROC	NEAR
	XOR	BX,BX
GUI_LOOP:
	XOR	AX,AX
	INT	16H
	CMP	AL,40H
	JNC	GUI_DISPLAY
	CMP	BL,'Y'				;bl中存放的是上一次的输入
	JNZ	GUI_LOOP_ISN
	JMP	GUI_IS_ENTER
GUI_LOOP_ISN:
	CMP	BL,'N'
	JNZ	GUI_LOOP
GUI_IS_ENTER:
	CMP	AL,0DH
	JZ	GUI_EXIT
GUI_DISPLAY:
	CMP	AL,60H
	JC	GUI_2CAP			;转换为大写
	SUB	AL,20H
GUI_2CAP:
	CMP	AL,'Y'
	JZ	GUI_DISINPUT
	CMP	AL,'N'
	JZ	GUI_DISINPUT
	
	MOV	AL,00H;在下面运行的程序中，什么都不显示
GUI_DISINPUT:
	PUSH	AX
	;清除上次的显示
	MOV	CX,WHITE
	PUSH	CX
	MOV	CX,0FFH
	PUSH	CX
	MOV	CX,YCUR
	PUSH	CX
	MOV	CX,XCUR
	PUSH	CX
	CALL	PUTASCII
	ADD	SP,8
	POP	AX
	MOV	BL,AL				;将本次输入放入bl
	;在当前光标处显示输入的值
	PUSH	BX
	;显示输入的值
	MOV	CX,RED
	PUSH	CX
	XOR	AH,AH
	PUSH	AX
	MOV	AX,YCUR
	PUSH	AX
	MOV	AX,XCUR
	PUSH	AX
	CALL	PUTASCII
	ADD	SP,8
	POP	BX
	JMP	GUI_LOOP
GUI_EXIT:
	MOV	AL,BL
	RET
GETUSERIN	ENDP
;****************************************************;
;*子程序名：	GETSELECT															**
;*功能：			获取用户的选择												**
;*入口参数：																				**
;*出口参数：	AL=选择																**
;****************************************************;	
GETSELECT	PROC	NEAR             ;从键盘上取得用户选择
	XOR   AX,AX
	INT  16H
	RET                    
GETSELECT	ENDP
;------------------显示部分子程序 开始------------------------------------------------------------
;****************************************************;
;*子程序名：	INITVIDEO															**
;*功能：			初始化显示（模式、寄存器、背景）			**
;*入口参数：	无																		**
;*出口参数：	无																		**
;****************************************************;
INITVIDEO	PROC	NEAR
	MOV	BX,SYVIDEOMODE
	CALL	SETMODEL
	;
	MOV	AX,OFFSET	PALETTEDATA
	PUSH	AX
	CALL	INITPALETTE
	POP	CX			;平衡堆栈
	;
	MOV	BX,DEEPBLUE
	CALL	SETBACKCOLOR
	RET
INITVIDEO	ENDP
;****************************************************;
;*子程序名：	SETMODEL															**
;*功能：			设置显示模式													**
;*入口参数：	BX=mode																**
;*出口参数：	无																		**
;****************************************************;
SETMODEL	PROC	NEAR
	PUSH	AX
	MOV	AX,04F02H
	INT	10H
	POP	AX
	RET
SETMODEL	ENDP
;****************************************************;
;*子程序名：	INITPALETTE														**
;*功能：			颜色寄存器定义												**
;*入口参数：	堆栈中为数据的起始地址								**
;*出口参数：	无																		**
;****************************************************;
INITPALETTE	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+4]=DATA POINT
	PUSH	SI
	MOV	DX,03C8H
	MOV	AL,0
	OUT	DX,AL
  DB	0EBH					;延时
  DB	00H
  DB	0EBH
  DB	00H						;延时
  ;
  XOR	SI,SI
  JMP	SHORT	INITPALADD
INITPALLOOP:
	MOV	BX,WORD	PTR	[BP+4]
	ADD	BX,SI
	MOV	AL,BYTE	PTR	[BX]
	XOR	AH,AH
	MOV	CL,2
	SAR	AX,CL
	MOV	DX,03C9H
	OUT	DX,AL
	INC	SI
INITPALADD:
	CMP	SI,0300H
	JL	SHORT	INITPALLOOP
  ;	
	POP	SI
	POP	BP
	RET
INITPALETTE	ENDP
;****************************************************;
;*子程序名：	SETBACKCOLOR													**
;*功能：			设置背景															**
;*入口参数：	bx=color															**
;*出口参数：																				**
;****************************************************;	
SETBACKCOLOR	PROC	NEAR
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	BP
	;
	MOV	AX,SCREEN_WIDTH
	MOV	CX,SCREEN_HEIGHT
	MUL	CX
	INC	DX						;????
	PUSH	BX					;1 COLOR	[BP+2]
	PUSH	DX					;2 PAGE  			[BP]
	MOV	BP,SP
	PUSH	ES					;
	CLC
	CLD
	XOR	DX,DX
	MOV	DI,0A000H
	MOV	ES,DI
	XOR	DI,DI
SETBACKCOLOR1:
		PUSH	DX
		MOV	AX,04F05H
		MOV	BX,0
		INT	10H
		MOV	AX,[BP+2]
		MOV	AH,AL
		MOV	CX,08000H
		REP	STOSW
		POP	DX
		INC	DX
		CMP	DX,[BP]
		JC	SETBACKCOLOR1
		POP	ES
		ADD	SP,4
		POP	BP
		POP	DX
		POP	CX
		POP	AX
		RET
SETBACKCOLOR	ENDP
;****************************************************;
;*子程序名：	VLINE																	**
;*功能：			画竖线																**
;*入口参数：	堆栈中从顶到底：y1(word),y2,x,				**
;*														color(word)	(X1<X2)		**
;*出口参数：																				**
;*调用说明：先将color压栈,其次x,y2,y1,必须保证y1<y2	**
;*					注意调用后平衡堆栈											**
;****************************************************;
VLINE	PROC	NEAR
	PUSH	BP
	MOV	BP,SP
	PUSH	SI
	PUSH	DI
	;
	PUSH		ES
	MOV		AX,[BP+4]	
	MOV		CX,SCREEN_WIDTH	
	MUL		CX
	ADD		AX,[BP+8]
	ADC		DX,0
	MOV		DI,0A000H
	MOV		ES,DI
	MOV		DI,AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H
	MOV		CX,[BP+6]	
	SUB		CX,[BP+4]
	INC		CX
	MOV		AX,[BP+10]
	CLD	
VLINELOOP:	
	MOV		ES:[DI],AL
	ADD		DI,SCREEN_WIDTH
	JNC	SHORT VLINENOCHANPAGE
	INC		DX
	PUSH		AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H
	POP		AX
VLINENOCHANPAGE:
	LOOP	SHORT VLINELOOP
	;
	POP	ES
  POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
VLINE	ENDP
;

;****************************************************;
;*子程序名：	HLINE																	**
;*功能：			画横线																**
;*入口参数：	堆栈中从顶到底：x1(word),x2,y,				**
;*														color(word)	(X1<X2)		**
;*出口参数：																				**
;*调用说明：先将color压栈,其次y,x2,x1,必须保证x1<x2	**
;*					注意调用后平衡堆栈											**
;****************************************************;
HLINE	PROC	NEAR
	PUSH	BP
	MOV	BP,SP				;为取参数做准备[BP+4]=x1,[BP+6]=x2,[BP+8]=y,[BP+10]=color...
	PUSH	SI
	PUSH	DI
	;
	PUSH		ES
 	MOV		AX,[BP+8]
	MOV		CX,SCREEN_WIDTH
  MUL		CX
  ADD		AX,[BP+4]
  ADC		DX,0
  MOV		DI,0A000H
 	MOV		ES,DI
  MOV		DI,AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H
	MOV		CX,[BP+6]
	SUB		CX,[BP+4]
	INC		CX
	MOV		AX,[BP+10]
	CLD	
HLINELOOP:
	STOSB	
	OR		DI,DI
	JNE	SHORT HLINENOCHANPAGE
	PUSH		AX
	MOV		AX,04F05H
	MOV		BX,0
	INC		DX
	INT		010H
	POP		AX
HLINENOCHANPAGE:
	LOOP	SHORT HLINELOOP
	;
	POP		ES
   ;
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
HLINE	ENDP

;****************************************************;
;*子程序名：	DRAWRECT															**
;*功能：			画矩形																**
;*入口参数：	堆栈中从顶到底：left(word),top,right	**
;*														bottom	color					**
;*出口参数：																				**
;*调用说明：先将color压栈,其次BOTTOM,RIGHT,TOP,LEFT	**
;*					保证left<right,top<bottom								**
;*					注意调用后平衡堆栈											**
;****************************************************;
DRAWRECT	PROC	NEAR
	PUSH	BP
	MOV	BP,SP			;为取参数做准备[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=RIGHT,[BP+10]=BOTTOM,[BP+12]=COLOR
	PUSH	SI
	PUSH	DI
	;
	MOV	DI,WORD PTR [BP+4]
	MOV	SI,WORD PTR [BP+12]
  PUSH	SI								;		HLINE(LEFT,RIGHT,top,COLOR);
	PUSH	WORD PTR [BP+6]
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	PUSH	SI							 ;		HLINE(LEFT,RIGHT,BOTTOM,COLOR);
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8							 
	;	
	PUSH	SI							;		VLINE(TOP,BOTTOM,LEFT,COLOR);
	PUSH	DI
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+6]
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;	
 	PUSH	SI								;		VLINE(TOP,BOTTOM,RIGHT,COLOR);
	PUSH	WORD PTR [BP+8]
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+6]
	CALL	NEAR PTR VLINE
	ADD	SP,8
	;
 	POP	DI
	POP	SI
	POP	BP
	RET	
DRAWRECT	ENDP
;****************************************************;
;*子程序名：	PUTPIXEL															**
;*功能：			写象素点															**
;*入口参数：	堆栈中从顶到底：x(word),y,color				**
;*出口参数：	无																		**
;*调用说明：先将color压栈,其次y,x										**
;*					注意调用后平衡堆栈											**
;****************************************************;
PUTPIXEL	PROC	NEAR
	PUSH	BP
	MOV	BP,SP			;为取参数做准备 [BP+4]=X,[BP+6]=Y,[BP+8]=COLOR
	PUSH	DI
	PUSH		ES			
  ;
  MOV		AX,[BP+6]			
 	MOV		BX,[BP+4]			
  MOV		CX,SCREEN_WIDTH 
  MUL		CX
	ADD		AX,BX	
	ADC		DX,0
	MOV		DI,0A000H
	MOV		ES,DI
	MOV		DI,AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H	
	MOV		AX,[BP+8]
	STOSB	
	;
	POP		ES	
	POP	DI
	POP	BP
	RET	
PUTPIXEL	ENDP

;****************************************************;
;*子程序名：	PUTASCII															**
;*功能：			显示英文															**
;*入口参数：	堆栈中从顶到底：X(word),Y,CODE				**
;*																		color					**
;*出口参数：																				**
;*调用说明：先将color压栈,其次CODE,Y,X							**
;*	ax,bx,cx,dx被影响		注意调用后平衡堆栈					**
;****************************************************;
PUTASCII	PROC	NEAR
	PUSH	BP
	MOV	BP,SP				;为取参数做准备[BP+4]=X,[BP+6]=Y,[BP+8]=CODE,[BP+10]=COLOR
	SUB	SP,4
	PUSH	SI
   ;
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTASCIISCH				;BEGIN:		SERCH FOR CHAR IN ASCII TABLE
PUTASCIICHLOOP:		
	MOV	AX,WORD PTR [BP-2]
	MOV	DX,17										;CODE+ENGLISH	MODEL
	IMUL	DX
	MOV	BX,AX
	MOV	AL,BYTE PTR ASCIITABLE[BX]
	CMP	AL,BYTE PTR [BP+8]
	JNE	SHORT PUTASCIIUNFIT
  JMP	SHORT PUTASCIIFIT
PUTASCIIUNFIT:
	INC	WORD PTR [BP-2]
PUTASCIISCH:
	CMP	WORD PTR [BP-2],MAXASCII
	JL	SHORT PUTASCIICHLOOP
PUTASCIIFIT:										;END:		SERCH FOR CHAR IN ASCII TABLE,SUCCESS
   ;
	MOV	AX,WORD PTR [BP-2]
	MOV	WORD PTR [BP-4],AX
 	XOR	SI,SI
	JMP	SHORT PUTASCIIDISWAIADD
PUTASCIIDISNEI:
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTASCIIDISNEIADD
PUTASCIIDIS:									;DISPALY CHAR IS OR NOT
 ;
	MOV	AX,WORD PTR [BP-4]
	MOV	DX,17
	IMUL	DX
	ADD	AX,SI
	MOV	BX,AX
	MOV	AL,BYTE PTR ASCIITABLE[BX+1]
	MOV	AH,0
	MOV	CL,7
	SUB	CL,BYTE PTR [BP-2]
	MOV	DX,1
	SHL	DX,CL
	TEST	AX,DX
	JE	SHORT PUTASCIIDISNO				;CAN NOT DISPLAY THSI PIXEL,JUMP
  PUSH	WORD PTR [BP+10]				;DISPLAY CHAR
	MOV	AX,WORD PTR [BP+6]
	ADD	AX,SI
	PUSH	AX
	MOV	AX,WORD PTR [BP+4]
	ADD	AX,WORD PTR [BP-2]
	PUSH	AX
	CALL	NEAR PTR PUTPIXEL
	ADD	SP,6
PUTASCIIDISNO:
	INC	WORD PTR [BP-2]
PUTASCIIDISNEIADD:
	CMP	WORD PTR [BP-2],8
	JL	SHORT PUTASCIIDIS
	INC	SI
PUTASCIIDISWAIADD:
	CMP	SI,16
	JL	SHORT PUTASCIIDISNEI
   ;
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTASCII	ENDP

;****************************************************; 
;*子程序名：	PUTHZ																	** 
;*功能：			显示汉字															** 
;*入口参数：	堆栈中从顶到底：X(word),Y,CODE				** 
;*																		color					** 
;*出口参数：																				** 
;*调用说明：先将color压栈,其次CODE,Y,X							** 
;*	ax,bx,cx,dx被影响	注意调用后平衡堆栈						** 
;****************************************************;
PUTHZ	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+4]=X,[BP+6]=Y,[BP+8]=CODE,[BP+10]=COLOR
	SUB	SP,2
	PUSH	SI
	PUSH	DI
  ;
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTHZFCODECOMP
PUTHZFCODE:
  ;	
	MOV	AX,WORD PTR [BP-2]
	MOV	DX,34									;LENGTH OF HZ MODEL
	IMUL	DX
	MOV	BX,AX
	MOV	AX,WORD PTR HZK16TABLE[BX]
	;XCHG	AL,AH;;;传到堆栈中的汉字高低相反，（调试发现），直接传送汉字内码时必须调整才能比较
	CMP	AX,WORD PTR [BP+8]
	JNE	SHORT PUTHZFCODEADD
   ;	
   ;				BREAK;
   ;	
	JMP	SHORT PUTHZFCODEOK
PUTHZFCODEADD:
	INC	WORD PTR [BP-2]
PUTHZFCODECOMP:
	MOV	AX,WORD PTR [BP-2]
	CMP	AX,WORD PTR HZCOUNT
	JL	SHORT PUTHZFCODE
PUTHZFCODEOK:								;FIND CODE IN HZTABLE OR WENT TO END
   ;	
	MOV	DI,WORD PTR [BP-2]	;INDEX=END OF TABLE
  ;	
	CMP	DI,WORD PTR HZCOUNT
	JNE	SHORT PUTHZDISPLAY		;找到则显示
	JMP	PUTHZFCODEFAIL				;没找到，退出
PUTHZDISPLAY:
   ;
	XOR	SI,SI
	JMP	PUTHZDISPWAI
PUTHZDISPNEI1:								;DISPLAYNEI1
   ;	
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTHZDISPNEICOMP
PUTHZDISPNEI1CODE:
  ;	
	MOV	CL,7
	SUB	CL,BYTE PTR [BP-2]
	MOV	AX,1
	SHL	AX,CL
	PUSH	AX
	MOV	AX,DI
	MOV	DX,34
	IMUL	DX
	MOV	DX,SI
	SHL	DX,1
	ADD	AX,DX
	MOV	BX,AX
	POP	AX
	TEST	AX,WORD PTR HZK16TABLE[BX+2]
	JE	SHORT PUTHZDISPNEI1NO							;NO DISPLAY
   ;	
	PUSH	WORD PTR [BP+10]
	MOV	AX,WORD PTR [BP+6]
	ADD	AX,SI
	PUSH	AX
	MOV	AX,WORD PTR [BP+4]
	ADD	AX,WORD PTR [BP-2]
	PUSH	AX
	CALL	NEAR PTR PUTPIXEL
	ADD	SP,6
PUTHZDISPNEI1NO:
	INC	WORD PTR [BP-2]
PUTHZDISPNEICOMP:
	CMP	WORD PTR [BP-2],8
	JL	SHORT PUTHZDISPNEI1CODE
   ;	
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTHZDISPNEI2CNMP						;DISPLAYNEI2
PUTHZDISPNEI2CODE:
   ;	
	MOV	CL,15
	SUB	CL,BYTE PTR [BP-2]
	MOV	AX,1
	SHL	AX,CL
	PUSH	AX
	MOV	AX,DI
	MOV	DX,34
	IMUL	DX
	MOV	DX,SI
	SHL	DX,1
	ADD	AX,DX
	MOV	BX,AX
	POP	AX
	TEST	AX,WORD PTR HZK16TABLE[BX+2]
	JE	SHORT PUTHZDISPNEI2ADD
   ;	
	PUSH	WORD PTR [BP+10]
	MOV	AX,WORD PTR [BP+6]
	ADD	AX,SI
	PUSH	AX
	MOV	AX,WORD PTR [BP+4]
	ADD	AX,WORD PTR [BP-2]
	ADD	AX,8
	PUSH	AX
	CALL	NEAR PTR PUTPIXEL
	ADD	SP,6
PUTHZDISPNEI2ADD:
	INC	WORD PTR [BP-2]
PUTHZDISPNEI2CNMP:
	CMP	WORD PTR [BP-2],8
	JL	SHORT PUTHZDISPNEI2CODE
	INC	SI
PUTHZDISPWAI:
	CMP	SI,16
	JGE	PUTHZDISPEXIT
	JMP	PUTHZDISPNEI1
PUTHZDISPEXIT:
PUTHZFCODEFAIL:
   ;	
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTHZ	ENDP

;****************************************************; 
;*子程序名：	PUTSTR																** 
;*功能：			显示字符串														** 
;*入口参数：	堆栈中从顶到底：X(word),Y,S(字符串地址** 
;*																		color					** 
;*出口参数：																				** 
;*调用说明：先将color压栈,其次S,Y,X									** 
;*					注意调用后平衡堆栈											** 
;****************************************************;	
PUTSTR	PROC	NEAR
	PUSH	BP
	MOV	BP,SP			;为取参数做准备[BP+4]=X,[BP+6]=Y,[BP+8]=OFFSET S,[BP+10]=COLOR
	PUSH	SI
	PUSH	DI
	MOV	DI,WORD PTR [BP+4]		;[DI]<- X
   ;
	XOR	SI,SI
	JMP	SHORT PUTSTRWHILE
PUTSTRIFASC_HZ:
   ;
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	CMP	BYTE PTR [BX],128
	JAE	SHORT PUTSTRHZ
   ;	
	PUSH	WORD PTR [BP+10]			;PUTASCII
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	MOV	AL,BYTE PTR [BX]
	PUSH	AX
	PUSH	WORD PTR [BP+6]
	PUSH	DI
	CALL	NEAR PTR PUTASCII
	ADD	SP,8
   ;	
	INC	SI
   ;	
	ADD	DI,8
   ;	
	JMP	SHORT PUTSTRWHILE
PUTSTRHZ:
   ;	
	PUSH	WORD PTR [BP+10]				;PUTHZ
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	PUSH	WORD PTR [BX]
	PUSH	WORD PTR [BP+6]
	PUSH	DI
	CALL	NEAR PTR PUTHZ
	ADD	SP,8
  ;	
	INC	SI
   ;	
	INC	SI
   ;	
	ADD	DI,16
PUTSTRWHILE:
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	CMP	BYTE PTR [BX],0
	JNE	SHORT PUTSTRIFASC_HZ
   ;	
	POP	DI
	POP	SI
	POP	BP
	RET	
PUTSTR	ENDP
;****************************************************; 
;*子程序名：	STRLEN																** 
;*功能：			测量字符串长度												** 
;*入口参数：	堆栈中从顶到底：S(字符串地址)					** 
;*																		color					** 
;*出口参数：	ax=length															** 
;*调用说明：将S压栈																	** 
;*					注意调用后平衡堆栈											**
;****************************************************;
STRLEN	PROC	NEAR
	PUSH	BP
	MOV	BP,SP
	MOV	CX,WORD PTR [BP+4]			;[BP+4]=S (ADDRESS OF STRING)
   ;	
	XOR	DX,DX
	JMP	SHORT STRLENWHILECOMP
STRLENWHILEADD:
   ;	
	INC	DX
STRLENWHILECOMP:
	MOV	BX,CX
	INC	CX
	CMP	BYTE PTR [BX],0
	JNE	SHORT STRLENWHILEADD	
  ;
	MOV	AX,DX									;DX=LENGTH OF STRING (BYTES)
	;													;return ax=length
	POP	BP
	RET	
STRLEN	ENDP

PUTBUTTON	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=PTEXT(POINT STRING),[BP+10]=COLOR
	SUB	SP,6
	PUSH	SI
	PUSH	DI
	MOV	SI,WORD PTR [BP+4]
	MOV	DI,WORD PTR [BP+6]
   ;
	PUSH	WORD PTR [BP+8]
	CALL	NEAR PTR STRLEN
	POP	CX
	MOV	WORD PTR [BP-2],AX					;LENGTH OF STING->[BP-2]
  ;	
	MOV	AX,WORD PTR [BP-2]
	ADD	AX,4
	MOV	CL,3
	SHL	AX,CL
	;XOR	AH,AH								;若要修改,注意此段
	;MOV	DL,BYTE PTR CHARWIDTH
	;MUL	DL
	MOV	DX,SI
	ADD	DX,AX
	DEC	DX
	MOV	WORD PTR [BP-4],DX					;[BP-4]=RIGHT
   ;
	MOV	AX,DI
	ADD	AX,DEFAULTBUTTONHEIGHT
	DEC	AX
	MOV	WORD PTR [BP-6],AX					;[BP-6]=BOTTOM
  ;	
	MOV	AX,WHITE
	PUSH	AX
	PUSH	DI
	PUSH	WORD PTR [BP-4]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;	
	MOV	AX,WHITE
	PUSH	AX
	PUSH	SI
	PUSH	WORD PTR [BP-6]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
  ;	
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP-6]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-4]
	DEC	AX
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	WORD PTR [BP-6]
	PUSH	WORD PTR [BP-4]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;	
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP-4]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-6]
	DEC	AX
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR VLINE
	ADD	SP,8
 ;
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	WORD PTR [BP-4]
	PUSH	WORD PTR [BP-6]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;		PUTSTR(LEFT+CHARWIDTH*2,TOP+CHARHEIGHT/2,PTEXT,COLOR);
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	MOV	AX,CHARHEIGHT
	SHR	AX,1
	ADD	AX,[BP+6]
	PUSH	AX
	MOV	AX,CHARWIDTH
	SHL	AX,1
	ADD	AX,[BP+4]
	PUSH	AX
	CALL	NEAR PTR PUTSTR
	ADD	SP,8
   ;
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTBUTTON	ENDP
;****************************************************;
;*子程序名：	FILLRECT															**
;*功能：			填充矩形															**
;*入口参数：	堆栈中从顶到底：left(word),top,right	**
;*														bottom	color					**
;*出口参数：																				**
;*调用说明：先将color压栈,其次BOTTOM,RIGHT,TOP,LEFT	**
;*					保证left<right,top<bottom		注意调用后平**
;*																						衡堆栈**
;****************************************************;
FILLRECT	PROC	NEAR
	PUSH	BP
	MOV	BP,SP		;为取参数做准备[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=RIGHT,[BP+10]=BOTTOM,[BP+12]=COLOR
	PUSH	SI
  ;
	XOR	SI,SI
   ;
	MOV	SI,WORD PTR [BP+6]
	JMP	SHORT FILLRECTCONCOUNT
FILRECTFILL:
    ;	
	PUSH	WORD PTR [BP+12]			;HLINE(LEFT,RIGHT,Y,COLOR);
	PUSH	SI
	PUSH	WORD PTR [BP+8]
	PUSH	WORD PTR [BP+4]
	CALL	NEAR PTR HLINE
	ADD	SP,8
	INC	SI
FILLRECTCONCOUNT:
	CMP	SI,WORD PTR [BP+10]
	JLE	SHORT FILRECTFILL
   ;
	POP	SI
	POP	BP
	RET	
FILLRECT	ENDP
;****************************************************; 
;*子程序名：	PUTWINDOW															** 
;*功能：			显示Window窗口												** 
;*入口参数：	堆栈中从顶到底：left(word),top,right	** 
;*						bottom,wndcolor,captiontext,capcolor	** 
;*出口参数：																				** 
;*调用说明：先将color压栈,其次...										** 
;*					注意调用后平衡堆栈	ADD SP,14						** 
;****************************************************;
PUTWINDOW	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+16]=CAPTIONCOLOR,[BP+14]=PCAPTIONTEXT,[BP+12]=WNDCOLOR,
	PUSH	SI					;[BP+10]=BOTTOM,	[BP+8]=RIGHT,	[BP+6]=TOP,	[BP+4]=LEFT
	PUSH	DI
	MOV	DI,WORD PTR [BP+4]
	MOV	SI,WORD PTR [BP+6]
    ;
	PUSH	WORD PTR [BP+12]				;填充窗体背景
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	PUSH	SI
	PUSH	DI
	CALL	NEAR PTR FILLRECT
	ADD	SP,10
    ;
 	MOV	AX,WHITE									;制造阴影:begin
	PUSH	AX
	PUSH	SI
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8
   ;
	MOV	AX,WHITE
	PUSH	AX
	PUSH	DI
	PUSH	WORD PTR [BP+10]
	PUSH	SI
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP+10]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP+8]
	DEC	AX
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;	
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP+8]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP+10]
	DEC	AX
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,DARKBLACK							
	PUSH	AX
	PUSH	WORD PTR [BP+8]
	PUSH	WORD PTR [BP+10]
	PUSH	SI
	CALL	NEAR PTR VLINE
	ADD	SP,8										;制造阴影:begin
   ;
	MOV	AX,BLUE										;标题栏颜色填充
	PUSH	AX
	MOV	AX,SI
	ADD	AX,DEFAULTCAPTIONHEIGHT
	INC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP+8]
	ADD	AX,-4
	PUSH	AX
	MOV	AX,SI
	ADD	AX,3
	PUSH	AX
	MOV	AX,DI
	ADD	AX,4
	PUSH	AX
	CALL	NEAR PTR FILLRECT
	ADD	SP,10
  ;
	PUSH	WORD PTR [BP+16]					;标题栏 字
	PUSH	WORD PTR [BP+14]
	MOV	AX,SI
	ADD	AX,6
	PUSH	AX
	MOV	AX,DI
	ADD	AX,8
	PUSH	AX
	CALL	NEAR PTR PUTSTR
	ADD	SP,8
  ;
	POP	DI
	POP	SI
	POP	BP
	RET	
PUTWINDOW	ENDP
;****************************************************; 
;*子程序名：	PUTEDITBOX														** 
;*功能：			显示编辑窗口													** 
;*入口参数：	堆栈中从顶到底：left(word),top,				** 
;*													nrchar(字符个数)				** 
;*出口参数：	改变了xcur,ycur(当前xy坐标)						** 
;*调用说明：先将nrchar压栈,其次top,left							** 
;*					注意调用后平衡堆栈											** 
;****************************************************;
PUTEDITBOX	PROC	NEAR
	PUSH	BP
	MOV	BP,SP									;;[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=NRCHAR
	PUSH SI
	PUSH DI
	MOV	SI,WORD PTR [BP+4]		;SI=LEFT
	MOV	DI,WORD PTR [BP+6]		;DI=TOP
   ;	
	MOV	AX,WORD PTR [BP+8]		;计算窗口的右边位置
	MOV	CL,3									;放在[sp-2]中 right
	SHL	AX,CL									;注意，由于字的宽度为8，可以以移位计算，此程序不可移植
	MOV	DX,SI
	ADD	DX,AX
	DEC	DX
	MOV	WORD PTR [BP-2],DX
   ;	
  MOV	AX,DI
	ADD	AX,DEFAULTEDITBOXHEIGHT
	DEC	AX
	MOV	WORD PTR [BP-4],AX
   ;	
	MOV	AX,WHITE							;设置底色 （白色）
	PUSH	AX
	PUSH	WORD PTR [BP-4]
	PUSH	WORD PTR [BP-2]
	PUSH	DI
	PUSH	SI
	CALL	NEAR PTR FILLRECT
	ADD	SP,10
  ;	
	MOV	AX,DARKBLACK          ;开始画框架
	PUSH	AX
	PUSH	DI
	PUSH	WORD PTR [BP-2]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
   ;	
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	SI
	PUSH	WORD PTR [BP-4]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-2]
	DEC	AX
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR HLINE
	ADD	SP,8
   ;	
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-4]
	DEC	AX
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,WHITE
	PUSH	AX
	PUSH	WORD PTR [BP-4]
	PUSH	WORD PTR [BP-2]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	MOV	AX,WHITE
	PUSH	AX
	PUSH	WORD PTR [BP-2]
	PUSH	WORD PTR [BP-4]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
  ;
	MOV	AX,SI							;改变当前光标的坐标
	ADD	AX,4
	MOV	XCUR,AX
  MOV	AX,DI
	ADD	AX,6
	MOV	YCUR,AX
  ;
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTEDITBOX	ENDP
;------------------显示部分子程序 结束------------------------------------------------------------
;------------------硬盘部分子程序 开始------------------------------------------------------------
;****************************************************;
;*子程序名：	RESETDISK															**
;*功能：			磁盘控制器重启(FLOP HD)								**
;*入口参数：	无																		**
;*出口参数：	CF=0	成功				CF=1  失败					**
;****************************************************;
RESETDISK	PROC	NEAR
	MOV	AH,0
	MOV	DL,80H				;缺省认为硬盘在IDE1 主盘
	INT	13H
	;
	RET
RESETDISK	ENDP
;****************************************************;
;*子程序名：	GETDISKATTR														**
;*功能：			获取磁盘属性													**
;*入口参数：	无																		**
;*出口参数：	CF=0	成功				CF=1  失败					**
;							AL=0  支持扩展		AL=1  不支持扩展		**
;****************************************************;
GETDISKATTR	PROC	NEAR
	;
	MOV	AH,41H
	MOV	BX,55AAH
	MOV	DL,80H			;缺省认为硬盘在IDE1 主盘
	INT	13H
	JC	GDA_NOSUPPORT		;访问失败，不支持扩展读写
	CMP	BX,0AA55H
	JNZ	GDA_NOSUPPORT		;访问失败，不支持扩展读写
	;支持扩展读写的话开始填充磁盘属性
	MOV	AX,4800H
	MOV	DX,0080H
	MOV	SI,OFFSET EDPARA_TABLE		;传送磁盘参数
	INT	13H
	;传送EDD
	MOV AX,EDD_SEG
	MOV	ES,AX
	MOV	DI,EDD_OFFSET
	MOV	SI,OFFSET EDD_BASEPORT			;SI->EDD
	MOV	CX,8
GDA_FILLEDD:
	MOV	AX,ES:WORD PTR [DI]
	MOV	[SI],AX
	INC	SI
	INC	SI
	INC	DI
	INC	DI
	LOOP	GDA_FILLEDD
	MOV	AL,0
	JMP	GDA_EXIT
GDA_NOSUPPORT:	
	MOV	AL,1
GDA_EXIT:
	RET
GETDISKATTR	ENDP
;****************************************************;
;*子程序名：	CALOFFSET()														**
;*功能：			计算offset值，单网可用LBA，扩展的LBA	**
;*入口参数：																				**
;*出口参数：																				**
;*函数说明：本函数经过改造，不仅仅填充硬盘的数据结构**
;*					而且填充卡的EPPROM TABLE.本来不想这么做,**
;*					考虑到程序可读性和程序的大小，权衡良久，**
;*					还是妥协了，从字面上已经看不出函数的作用**
;*					了    罗冰2005-7-1 20:52								**
;****************************************************;
CALOFFSET	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI
	;小字表示在程序结尾时候添加的代码
	push	di
	mov	ax,ds
	mov	es,ax
	;	
	MOV	SI,OFFSET	EDPARA_TOTAL
	MOV	AX,WORD	PTR	[SI]
	MOV	DX,WORD	PTR	[SI+2]	;DX:AX EDPARA_TOTAL
	MOV	BX,DX
	MOV	CL,6								;计算OFFSET值
	SHR BX,CL
	SAL	BX,CL
	MOV	SI,OFFSET MYOFFSETVAL		;存入MYOFFSETVAL(GCDZONE[7])
	XOR	AX,AX
	MOV	[SI],AX
	MOV	[SI+2],BX
	;
	mov	di,offset MYZONE_OFFSET	;填充epprom table
	mov	[di],ax
	mov	[di+2],bx
	;
	push	bx
	sub	bx,2
	mov	di,offset WAI_MAX		;填充epprom table
	mov	[di],ax
	mov	[di+2],bx
	pop	bx
	;
	MOV	CL,6
	SHR BX,CL		
	MOV	CL,5
	SAL BX,CL								;BX存贮了offset高16位值
	XOR	AX,AX
	MOV	SI,OFFSET	OFFSETVAL	;存入OFFSETVAL
	MOV	[SI],AX
	MOV	[SI+2],BX
	;
	mov	di,offset WAI_OFFSET	;填充epprom table
	mov	[di],ax
	mov	[di+2],bx
	;
	SUB	BX,2										;计算单网可用的总逻辑扇区数
	MOV	SI,OFFSET	PART_MAXLBA		;存入PART_MAXLBA
	MOV	[SI],AX
	MOV	[SI+2],BX								;bx存储了part_maxlba的高16位
	;
	mov	di,offset NEI_MAX	;填充epprom table
	mov	[di],ax
	mov	[di+2],bx
	;
	;计算扩展分区的大小，(可用386的寄存器)
	;CLC
	;SUB	AX,01676H
	;SBB	BX,0271H					;减去起始的扇区
	;MOV	SI,OFFSET MBR_EXT_MAX
	;MOV	[SI],AX
	;MOV	[SI+2],BX
	;
	mov	eax,EDPARA_TOTAL		;;填充epprom table
	sub	eax,1
	mov	MYZONE_MAX,eax
	pop	di
	POP	SI
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
CALOFFSET	ENDP
;****************************************************;
;*子程序名：	RWDISKLBA															**
;*功能：			扩展读写硬盘													**
;*入口参数：	EDAP_TABLE,AH(必须自己填充表)					**
;*出口参数：	CF=0 成功    CF=1失败									**
;****************************************************;
RWDISKLBA	PROC	NEAR
	MOV	DL,80H
	MOV	SI,OFFSET	EDAP_TABLE		;DS:SI
	INT	13H
	RET
RWDISKLBA	ENDP
;****************************************************;
;*子程序名：	FILLMBR																**
;*功能：			写硬盘从MBR区起200H 扇区							**
;*入口参数：																				**
;*出口参数：	AL=1 写成功   AL=0 写失败							**
;****************************************************;
FILLMBR	PROC	NEAR
;写外网
	MOV	CX,200H
	MOV	SI,OFFSET OFFSETVAL
	MOV	BX,WORD PTR [SI]
	CLC
	SUB	BX,1
	MOV	AX,WORD PTR [SI+2]
	MOV	EDAP_RWLBAH,AX
FILLSEC_LOOPWAI:
	INC	BX
	MOV	EDAP_RWLBAL,BX
	MOV	EDAP_RWCOUNT,01H
	MOV	AX,OFFSET MBRBUFFER
	MOV	EDAP_OFFSET,AX
	MOV	AX,DS
	MOV	EDAP_SEG,AX
	MOV	AH,43H
	PUSH	CX
	PUSH	BX
	CALL	RWDISKLBA
	POP	BX
	POP	CX
	MOV	AL,0					;写失败
	JC	FILLSEC_EXIT
	LOOP	FILLSEC_LOOPWAI
	;准备好MBR,开始写入内网
	MOV	CX,200H
	MOV	BX,0FFFFH
	MOV	EDAP_RWLBAH,00H
FILLSEC_LOOPNEI:
	INC	BX
	MOV	EDAP_RWLBAL,BX
	MOV	EDAP_RWCOUNT,01H
	MOV	AX,OFFSET MBRBUFFER
	MOV	EDAP_OFFSET,AX
	MOV	AX,DS
	MOV	EDAP_SEG,AX
	MOV	AH,43H
	PUSH	CX
	PUSH	BX
	CALL	RWDISKLBA
	POP	BX
	POP	CX
	MOV	AL,0					;写失败
	JC	FILLSEC_EXIT
	LOOP	FILLSEC_LOOPNEI
	;;;;;
	MOV	AL,1
FILLSEC_EXIT:	
	RET
FILLMBR	ENDP

;------------------硬盘部分子程序 结束------------------------------------------------------------
END START