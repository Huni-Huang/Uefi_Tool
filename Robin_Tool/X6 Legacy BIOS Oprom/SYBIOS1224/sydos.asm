;程序说明：为写入bios编写的神郁软件，在dos下执行，调试用
;
;2005-7-4      luobing
;各个子程序基本调试完毕，读出来的数据与预想的基本相符
;对于写硬盘那块，还要做一些调整，外网（offset之后）的分区表没有写到硬盘上;(已写)
;从今天开始，程序不准做大的修改，修改的部分都会标上日期
;看程序可用的一些字符 ##NOTTEST(未测试)  ##DEBUG(为调试所加)  ##ERROR(严重错误)
;											##AMEND(date:y-m-d hh:mm)修改及日期
;罗冰  2005-7-4  20:08
;考虑以下情况，用户在外网发现自己的分区表不对，软件会提示，要求安装，再提示不在安装状态
;							用户插上开关，此时到了内网状态，很不巧，内网的分区是符合的，软件不会再提示了，怎么办?
;					解决办法：在检查分区的模块中，先判断是否在安装状态，在的话就检查外网分区(之所以这样做，是因为offset的关系)
;问题：开始的时候必须填充单片机中的可读区域，否则安装的时候不能读写整个硬盘，
;2005-7-5   10:53  luobing
;
;本程序应该不需要修改，这是在dos下调试时候可运行的SY软件，只要这个软件可以运行，加入bios的sybios应该也可以
;2005-7-6   19:12  luobing
;常量定义:主要是界面显示所用到常量
;#############################################  常量定义开始  #####################################################
;字符
MAXASCII		=	255
MAXCHINESE	=	255
;显示模式
SYVIDEOMODE		=	0101H
DOSVIDEOMODE	=	03H
SCREEN_WIDTH	=	640
SCREEN_HEIGHT	=	480

;颜色的常量定义
BLACK	=	0
WHITE	=	1
LIGHTGRAY	=	2
DEEPBLUE	=	3
DARKBLACK	=	4
LIGHTBLACK	=	5
YELLOW	=	6
GREEN	=	7
RED	=	8
BLUE	=	9
;
HZCOUNT	=	84					;当前汉字提取了83个
;
;图象长度 高度常量
CHARWIDTH	=	8
CHARHEIGHT	=	16
DEFAULTBUTTONHEIGHT	=	32		;2*CHARHEIGHT
DEFAULTCAPTIONHEIGHT	=	26	;amend for show logo
DEFAULTEDITBOXHEIGHT	=	24	;DEFAULTEDITBOXHEIGHT=DEFAULTBUTTONHEIGHT-CHARHEIGHT/2
;框架显示所用的常量
FRAME_LEFT	=	140
FRAME_TOP		=	120
FRAME_RIGHT	=	490
FRAME_BOTTOM	=	350
;logo
LOGO_WIDTH	=	24
LOGO_HEIGHT	=	24
;#############################################  常量定义结束  #####################################################
;
    .MODEL SMALL
    .386
    .STACK 200H
.DATA
;#############################################  数据段开始  #####################################################
;数据段：显示部分所用数据，硬盘控制所用数据(结构)，提示信息所用字符串
DATABEGIN	LABEL	BYTE
;===============================字符串============================================
STR_SYWAI				DB	'1. 进入外网',00h
STR_SYNEI				DB	'2. 进入内网',00h
STR_CAP					DB	'神郁隔离计算机',00h
STR_NOPRIHD			DB	'硬盘不是主盘或不存在,请您确认!',00H
STR_NOSUPEXTHD	DB	'硬盘版本较低,不支持扩展读写...',00H
STR_NOSUP15			DB	'非常抱歉,本系统不支持磁头为15的硬盘.',00H
STR_NOCARD			DB	'卡不存在或非神郁专用卡,请您确认!',00H
STR_UNMATCHOFF	DB	'卡的配置不对,按Y键将安装神郁安全隔离系统.',00H
STR_SETUP				DB	'选择 Y 键将安装神郁安全隔离系统.',00H
STR_SETUP1			DB	'分区表不符合,按Y键将安装神郁安全隔离系统.',00H
STR_SETUP2			DB	'您要继续吗?(ENTER 确认) ',00H
STR_NOSUPPORTHD	DB	'本系统不支持60G以下硬盘,请您更换.',00H
STR_WEPP_ERROR	DB	'写EEPROM出错,请您更换单片机或重启再试.',00H
STR_NOT_SETUOST	DB	'卡不在安装状态,请您检查!',00h
STR_VERSION			DB	'Current Version: SYBIOS 1.00 for QDI',00H
;===============================显示=======================================================================
;颜色寄存器&&ASCII表&&汉字表
;;颜色寄存器的填充值
PALETTEDATA	DB	0 ,0, 0				;BLACK
						DB	255,255,255		;WHITE
						DB	212,208,200		;LIGHT	GRAY
						DB	18,95,167			;DEEP	BLUE
						DB	64,64,64			;DARK	BLACK
						DB	128,128,128		;LIGHT	BLACK
						DB	255,255,0			;YELLOW
						DB	0,153,0				;GREEN
						DB	153,0,0				;RED
						DB	0,0,192				;BLUE
;显示logo所用的颜色
						db 004H, 002H, 004H
						db 084H, 086H, 084H
						db 0b4H, 002H, 014H
						db 074H, 06aH, 094H
						db 03cH, 03aH, 03cH
						db 0d4H, 042H, 054H
						db 03cH, 03aH, 0fcH
						db 004H, 002H, 0fcH
						db 0ccH, 026H, 03cH
						db 0b4H, 06aH, 09cH
						db 0c4H, 0c6H, 0c4H
						db 0b4H, 016H, 03cH
						db 01cH, 01eH, 01cH
						db 064H, 062H, 0b4H
						db 074H, 066H, 0ecH
						db 05cH, 05aH, 05cH
						db 0dcH, 072H, 084H
						db 0e4H, 092H, 09cH
						db 0c4H, 002H, 00cH
						db 0acH, 076H, 0c4H
						db 014H, 012H, 014H
						db 01cH, 01eH, 0fcH
						db 0bcH, 066H, 09cH
						db 094H, 076H, 0dcH
						db 0bcH, 0baH, 0bcH
						db 0c4H, 00eH, 024H
						db 0ccH, 036H, 04cH
						db 05cH, 05aH, 0ecH
						db 04cH, 04aH, 04cH
						db 0d4H, 052H, 064H
						db 044H, 046H, 0fcH
						db 074H, 072H, 0e4H
						db 06cH, 06aH, 06cH
						db 0c4H, 002H, 01cH
						db 00cH, 00aH, 00cH
						db 00cH, 00eH, 0fcH
						db 0acH, 06aH, 0b4H
						db 0fcH, 0f2H, 0f4H
						db 0ccH, 012H, 02cH
						db 034H, 032H, 034H
						db 06cH, 06aH, 0e4H
						db 07cH, 07eH, 07cH
						db 0ccH, 02eH, 044H
						db 084H, 06aH, 0e4H
						db 0e4H, 09eH, 0acH
						db 01cH, 01aH, 01cH
						db 0ecH, 0aaH, 0b4H
						db 0ccH, 05aH, 07cH
						db 064H, 066H, 084H
						db 0ccH, 006H, 024H
						db 0b4H, 06aH, 0acH
						db 0ccH, 01aH, 034H
						db 00cH, 002H, 004H
						db 0acH, 0aeH, 0acH
						db 074H, 072H, 0a4H
						db 044H, 042H, 044H
						db 044H, 042H, 0fcH
						db 00cH, 00aH, 0fcH
						db 0f4H, 0d6H, 0dcH
						db 024H, 026H, 024H
						db 01cH, 012H, 024H
						db 02cH, 02aH, 0fcH
						db 0c4H, 06aH, 09cH
						db 0d4H, 03eH, 054H
						db 064H, 062H, 0f4H
						db 054H, 052H, 064H
						db 04cH, 046H, 0fcH
						db 0c4H, 006H, 01cH
						db 0ccH, 016H, 02cH
						db 0d4H, 032H, 04cH
						db 084H, 06eH, 0e4H
						db 0ecH, 0b6H, 0bcH
						db 004H, 006H, 004H
						db 0bcH, 002H, 01cH
						db 03cH, 03eH, 03cH
						db 0d4H, 04eH, 064H
						db 044H, 03eH, 0fcH
						db 00cH, 006H, 0fcH
						db 0ccH, 0ceH, 0ccH
						db 064H, 066H, 0b4H
						db 05cH, 05eH, 05cH
						db 0dcH, 07eH, 08cH
						db 0e4H, 09aH, 0a4H
						db 0c4H, 002H, 014H
						db 0b4H, 076H, 0bcH
						db 014H, 016H, 014H
						db 0bcH, 06aH, 09cH
						db 09cH, 076H, 0d4H
						db 0c4H, 00eH, 02cH
						db 0d4H, 036H, 04cH
						db 064H, 05aH, 0f4H
						db 04cH, 04eH, 04cH
						db 0d4H, 056H, 064H
						db 07cH, 07aH, 0ccH
						db 06cH, 06eH, 06cH
						db 00cH, 00eH, 00cH
						db 01cH, 016H, 0fcH
						db 0acH, 06eH, 0b4H
						db 0fcH, 0faH, 0fcH
						db 034H, 036H, 034H
						db 06cH, 06eH, 0e4H
						db 0ccH, 032H, 04cH
						db 0ecH, 0a2H, 0acH
						db 0dcH, 05eH, 074H
						db 06cH, 06aH, 094H
						db 0b4H, 06eH, 0acH
						db 0b4H, 0b6H, 0b4H
						db 074H, 072H, 0acH
						db 02cH, 02aH, 02cH
						db 034H, 02eH, 0fcH
						db 04cH, 04aH, 0fcH
						db 0c4H, 006H, 024H
						db 0ccH, 016H, 034H
						db 084H, 06eH, 0ecH
						db 0ecH, 0beH, 0c4H
						db 000H, 000H, 000H
;
XCUR				DW	00H						;当前光标的坐标，2005-6-30
YCUR				DW	00H			
ASCIITABLE	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  001H,000H,000H,07EH,081H,0A5H,081H,081H,0BDH,099H,081H,081H,07EH,000H,000H,000H,000H
						DB  002H,000H,000H,07EH,0FFH,0DBH,0FFH,0FFH,0C3H,0E7H,0FFH,0FFH,07EH,000H,000H,000H,000H
						DB  003H,000H,000H,000H,000H,06CH,0FEH,0FEH,0FEH,0FEH,07CH,038H,010H,000H,000H,000H,000H
						DB  004H,000H,000H,000H,000H,010H,038H,07CH,0FEH,07CH,038H,010H,000H,000H,000H,000H,000H
						DB  005H,000H,000H,000H,018H,03CH,03CH,0E7H,0E7H,0E7H,018H,018H,03CH,000H,000H,000H,000H
						DB  006H,000H,000H,000H,018H,03CH,07EH,0FFH,0FFH,07EH,018H,018H,03CH,000H,000H,000H,000H
						DB  007H,000H,000H,000H,000H,000H,000H,018H,03CH,03CH,018H,000H,000H,000H,000H,000H,000H
						DB  008H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0E7H,0C3H,0C3H,0E7H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
						DB  009H,000H,000H,000H,000H,000H,03CH,066H,042H,042H,066H,03CH,000H,000H,000H,000H,000H
						DB  00AH,0FFH,0FFH,0FFH,0FFH,0FFH,0C3H,099H,0BDH,0BDH,099H,0C3H,0FFH,0FFH,0FFH,0FFH,0FFH
						DB  00BH,000H,000H,01EH,00EH,01AH,032H,078H,0CCH,0CCH,0CCH,0CCH,078H,000H,000H,000H,000H
						DB  00CH,000H,000H,03CH,066H,066H,066H,066H,03CH,018H,07EH,018H,018H,000H,000H,000H,000H
						DB  00DH,000H,000H,03FH,033H,03FH,030H,030H,030H,030H,070H,0F0H,0E0H,000H,000H,000H,000H
						DB  00EH,000H,000H,07FH,063H,07FH,063H,063H,063H,063H,067H,0E7H,0E6H,0C0H,000H,000H,000H
						DB  00FH,000H,000H,000H,018H,018H,0DBH,03CH,0E7H,03CH,0DBH,018H,018H,000H,000H,000H,000H
						DB  010H,000H,080H,0C0H,0E0H,0F0H,0F8H,0FEH,0F8H,0F0H,0E0H,0C0H,080H,000H,000H,000H,000H
						DB  011H,000H,002H,006H,00EH,01EH,03EH,0FEH,03EH,01EH,00EH,006H,002H,000H,000H,000H,000H
						DB  012H,000H,000H,018H,03CH,07EH,018H,018H,018H,07EH,03CH,018H,000H,000H,000H,000H,000H
						DB  013H,000H,000H,066H,066H,066H,066H,066H,066H,066H,000H,066H,066H,000H,000H,000H,000H
						DB  014H,000H,000H,07FH,0DBH,0DBH,0DBH,07BH,01BH,01BH,01BH,01BH,01BH,000H,000H,000H,000H
						DB  015H,000H,07CH,0C6H,060H,038H,06CH,0C6H,0C6H,06CH,038H,00CH,0C6H,07CH,000H,000H,000H
						DB  016H,000H,000H,000H,000H,000H,000H,000H,000H,0FEH,0FEH,0FEH,0FEH,000H,000H,000H,000H
						DB  017H,000H,000H,018H,03CH,07EH,018H,018H,018H,07EH,03CH,018H,07EH,000H,000H,000H,000H
						DB  018H,000H,000H,018H,03CH,07EH,018H,018H,018H,018H,018H,018H,018H,000H,000H,000H,000H
						DB  019H,000H,000H,018H,018H,018H,018H,018H,018H,018H,07EH,03CH,018H,000H,000H,000H,000H
						DB  01AH,000H,000H,000H,000H,000H,018H,00CH,0FEH,00CH,018H,000H,000H,000H,000H,000H,000H
						DB  01BH,000H,000H,000H,000H,000H,030H,060H,0FEH,060H,030H,000H,000H,000H,000H,000H,000H
						DB  01CH,000H,000H,000H,000H,000H,000H,0C0H,0C0H,0C0H,0FEH,000H,000H,000H,000H,000H,000H
						DB  01DH,000H,000H,000H,000H,000H,028H,06CH,0FEH,06CH,028H,000H,000H,000H,000H,000H,000H
						DB  01EH,000H,000H,000H,000H,010H,038H,038H,07CH,07CH,0FEH,0FEH,000H,000H,000H,000H,000H
						DB  01FH,000H,000H,000H,000H,0FEH,0FEH,07CH,07CH,038H,038H,010H,000H,000H,000H,000H,000H
						DB  020H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  021H,000H,000H,018H,03CH,03CH,03CH,018H,018H,018H,000H,018H,018H,000H,000H,000H,000H
						DB  022H,000H,066H,066H,066H,024H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  023H,000H,000H,000H,06CH,06CH,0FEH,06CH,06CH,06CH,0FEH,06CH,06CH,000H,000H,000H,000H
						DB  024H,018H,018H,07CH,0C6H,0C2H,0C0H,07CH,006H,006H,086H,0C6H,07CH,018H,018H,000H,000H
						DB  025H,000H,000H,000H,000H,0C2H,0C6H,00CH,018H,030H,060H,0C6H,086H,000H,000H,000H,000H
						DB  026H,000H,000H,038H,06CH,06CH,038H,076H,0DCH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  027H,000H,030H,030H,030H,060H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  028H,000H,000H,00CH,018H,030H,030H,030H,030H,030H,030H,018H,00CH,000H,000H,000H,000H
						DB  029H,000H,000H,030H,018H,00CH,00CH,00CH,00CH,00CH,00CH,018H,030H,000H,000H,000H,000H
						DB  02AH,000H,000H,000H,000H,000H,066H,03CH,0FFH,03CH,066H,000H,000H,000H,000H,000H,000H
						DB  02BH,000H,000H,000H,000H,000H,018H,018H,07EH,018H,018H,000H,000H,000H,000H,000H,000H
						DB  02CH,000H,000H,000H,000H,000H,000H,000H,000H,000H,018H,018H,018H,030H,000H,000H,000H
						DB  02DH,000H,000H,000H,000H,000H,000H,000H,0FEH,000H,000H,000H,000H,000H,000H,000H,000H
						DB  02EH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,018H,018H,000H,000H,000H,000H
						DB  02FH,000H,000H,000H,000H,002H,006H,00CH,018H,030H,060H,0C0H,080H,000H,000H,000H,000H
						DB  030H,000H,000H,038H,06CH,0C6H,0C6H,0D6H,0D6H,0C6H,0C6H,06CH,038H,000H,000H,000H,000H
						DB  031H,000H,000H,018H,038H,078H,018H,018H,018H,018H,018H,018H,07EH,000H,000H,000H,000H
						DB  032H,000H,000H,07CH,0C6H,006H,00CH,018H,030H,060H,0C0H,0C6H,0FEH,000H,000H,000H,000H
						DB  033H,000H,000H,07CH,0C6H,006H,006H,03CH,006H,006H,006H,0C6H,07CH,000H,000H,000H,000H
						DB  034H,000H,000H,00CH,01CH,03CH,06CH,0CCH,0FEH,00CH,00CH,00CH,01EH,000H,000H,000H,000H
						DB  035H,000H,000H,0FEH,0C0H,0C0H,0C0H,0FCH,006H,006H,006H,0C6H,07CH,000H,000H,000H,000H
						DB  036H,000H,000H,038H,060H,0C0H,0C0H,0FCH,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  037H,000H,000H,0FEH,0C6H,006H,006H,00CH,018H,030H,030H,030H,030H,000H,000H,000H,000H
						DB  038H,000H,000H,07CH,0C6H,0C6H,0C6H,07CH,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  039H,000H,000H,07CH,0C6H,0C6H,0C6H,07EH,006H,006H,006H,00CH,078H,000H,000H,000H,000H
						DB  03AH,000H,000H,000H,000H,018H,018H,000H,000H,000H,018H,018H,000H,000H,000H,000H,000H
						DB  03BH,000H,000H,000H,000H,018H,018H,000H,000H,000H,018H,018H,030H,000H,000H,000H,000H
						DB  03CH,000H,000H,000H,006H,00CH,018H,030H,060H,030H,018H,00CH,006H,000H,000H,000H,000H
						DB  03DH,000H,000H,000H,000H,000H,07EH,000H,000H,07EH,000H,000H,000H,000H,000H,000H,000H
						DB  03EH,000H,000H,000H,060H,030H,018H,00CH,006H,00CH,018H,030H,060H,000H,000H,000H,000H
						DB  03FH,000H,000H,07CH,0C6H,0C6H,00CH,018H,018H,018H,000H,018H,018H,000H,000H,000H,000H
						DB  040H,000H,000H,000H,07CH,0C6H,0C6H,0DEH,0DEH,0DEH,0DCH,0C0H,07CH,000H,000H,000H,000H
						DB  041H,000H,000H,010H,038H,06CH,0C6H,0C6H,0FEH,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  042H,000H,000H,0FCH,066H,066H,066H,07CH,066H,066H,066H,066H,0FCH,000H,000H,000H,000H
						DB  043H,000H,000H,03CH,066H,0C2H,0C0H,0C0H,0C0H,0C0H,0C2H,066H,03CH,000H,000H,000H,000H
						DB  044H,000H,000H,0F8H,06CH,066H,066H,066H,066H,066H,066H,06CH,0F8H,000H,000H,000H,000H
						DB  045H,000H,000H,0FEH,066H,062H,068H,078H,068H,060H,062H,066H,0FEH,000H,000H,000H,000H
						DB  046H,000H,000H,0FEH,066H,062H,068H,078H,068H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  047H,000H,000H,03CH,066H,0C2H,0C0H,0C0H,0DEH,0C6H,0C6H,066H,03AH,000H,000H,000H,000H
						DB  048H,000H,000H,0C6H,0C6H,0C6H,0C6H,0FEH,0C6H,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  049H,000H,000H,03CH,018H,018H,018H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  04AH,000H,000H,01EH,00CH,00CH,00CH,00CH,00CH,0CCH,0CCH,0CCH,078H,000H,000H,000H,000H
						DB  04BH,000H,000H,0E6H,066H,066H,06CH,078H,078H,06CH,066H,066H,0E6H,000H,000H,000H,000H
						DB  04CH,000H,000H,0F0H,060H,060H,060H,060H,060H,060H,062H,066H,0FEH,000H,000H,000H,000H
						DB  04DH,000H,000H,0C6H,0EEH,0FEH,0FEH,0D6H,0C6H,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  04EH,000H,000H,0C6H,0E6H,0F6H,0FEH,0DEH,0CEH,0C6H,0C6H,0C6H,0C6H,000H,000H,000H,000H
						DB  04FH,000H,000H,07CH,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  050H,000H,000H,0FCH,066H,066H,066H,07CH,060H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  051H,000H,000H,07CH,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0D6H,0DEH,07CH,00CH,00EH,000H,000H
						DB  052H,000H,000H,0FCH,066H,066H,066H,07CH,06CH,066H,066H,066H,0E6H,000H,000H,000H,000H
						DB  053H,000H,000H,07CH,0C6H,0C6H,060H,038H,00CH,006H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  054H,000H,000H,07EH,07EH,05AH,018H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  055H,000H,000H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  056H,000H,000H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,06CH,038H,010H,000H,000H,000H,000H
						DB  057H,000H,000H,0C6H,0C6H,0C6H,0C6H,0D6H,0D6H,0D6H,0FEH,0EEH,06CH,000H,000H,000H,000H
						DB  058H,000H,000H,0C6H,0C6H,06CH,07CH,038H,038H,07CH,06CH,0C6H,0C6H,000H,000H,000H,000H
						DB  059H,000H,000H,066H,066H,066H,066H,03CH,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  05AH,000H,000H,0FEH,0C6H,086H,00CH,018H,030H,060H,0C2H,0C6H,0FEH,000H,000H,000H,000H
						DB  05BH,000H,000H,03CH,030H,030H,030H,030H,030H,030H,030H,030H,03CH,000H,000H,000H,000H
						DB  05CH,000H,000H,000H,080H,0C0H,0E0H,070H,038H,01CH,00EH,006H,002H,000H,000H,000H,000H
						DB  05DH,000H,000H,03CH,00CH,00CH,00CH,00CH,00CH,00CH,00CH,00CH,03CH,000H,000H,000H,000H
						DB  05EH,010H,038H,06CH,0C6H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  05FH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,0FFH,000H,000H
						DB  060H,030H,030H,018H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  061H,000H,000H,000H,000H,000H,078H,00CH,07CH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  062H,000H,000H,0E0H,060H,060H,078H,06CH,066H,066H,066H,066H,07CH,000H,000H,000H,000H
						DB  063H,000H,000H,000H,000H,000H,07CH,0C6H,0C0H,0C0H,0C0H,0C6H,07CH,000H,000H,000H,000H
						DB  064H,000H,000H,01CH,00CH,00CH,03CH,06CH,0CCH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  065H,000H,000H,000H,000H,000H,07CH,0C6H,0FEH,0C0H,0C0H,0C6H,07CH,000H,000H,000H,000H
						DB  066H,000H,000H,038H,06CH,064H,060H,0F0H,060H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  067H,000H,000H,000H,000H,000H,076H,0CCH,0CCH,0CCH,0CCH,0CCH,07CH,00CH,0CCH,078H,000H
						DB  068H,000H,000H,0E0H,060H,060H,06CH,076H,066H,066H,066H,066H,0E6H,000H,000H,000H,000H
						DB  069H,000H,000H,018H,018H,000H,038H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  06AH,000H,000H,006H,006H,000H,00EH,006H,006H,006H,006H,006H,006H,066H,066H,03CH,000H
						DB  06BH,000H,000H,0E0H,060H,060H,066H,06CH,078H,078H,06CH,066H,0E6H,000H,000H,000H,000H
						DB  06CH,000H,000H,038H,018H,018H,018H,018H,018H,018H,018H,018H,03CH,000H,000H,000H,000H
						DB  06DH,000H,000H,000H,000H,000H,0ECH,0FEH,0D6H,0D6H,0D6H,0D6H,0C6H,000H,000H,000H,000H
						DB  06EH,000H,000H,000H,000H,000H,0DCH,066H,066H,066H,066H,066H,066H,000H,000H,000H,000H
						DB  06FH,000H,000H,000H,000H,000H,07CH,0C6H,0C6H,0C6H,0C6H,0C6H,07CH,000H,000H,000H,000H
						DB  070H,000H,000H,000H,000H,000H,0DCH,066H,066H,066H,066H,066H,07CH,060H,060H,0F0H,000H
						DB  071H,000H,000H,000H,000H,000H,076H,0CCH,0CCH,0CCH,0CCH,0CCH,07CH,00CH,00CH,01EH,000H
						DB  072H,000H,000H,000H,000H,000H,0DCH,076H,066H,060H,060H,060H,0F0H,000H,000H,000H,000H
						DB  073H,000H,000H,000H,000H,000H,07CH,0C6H,060H,038H,00CH,0C6H,07CH,000H,000H,000H,000H
						DB  074H,000H,000H,010H,030H,030H,0FCH,030H,030H,030H,030H,036H,01CH,000H,000H,000H,000H
						DB  075H,000H,000H,000H,000H,000H,0CCH,0CCH,0CCH,0CCH,0CCH,0CCH,076H,000H,000H,000H,000H
						DB  076H,000H,000H,000H,000H,000H,066H,066H,066H,066H,066H,03CH,018H,000H,000H,000H,000H
						DB  077H,000H,000H,000H,000H,000H,0C6H,0C6H,0D6H,0D6H,0D6H,0FEH,06CH,000H,000H,000H,000H
						DB  078H,000H,000H,000H,000H,000H,0C6H,06CH,038H,038H,038H,06CH,0C6H,000H,000H,000H,000H
						DB  079H,000H,000H,000H,000H,000H,0C6H,0C6H,0C6H,0C6H,0C6H,0C6H,07EH,006H,00CH,0F8H,000H
						DB  07AH,000H,000H,000H,000H,000H,0FEH,0CCH,018H,030H,060H,0C6H,0FEH,000H,000H,000H,000H
						DB  07BH,000H,000H,00EH,018H,018H,018H,070H,018H,018H,018H,018H,00EH,000H,000H,000H,000H
						DB  07CH,000H,000H,018H,018H,018H,018H,000H,018H,018H,018H,018H,018H,000H,000H,000H,000H
						DB  07DH,000H,000H,070H,018H,018H,018H,00EH,018H,018H,018H,018H,070H,000H,000H,000H,000H
						DB  07EH,000H,000H,076H,0DCH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						DB  07FH,000H,000H,000H,000H,010H,038H,06CH,0C6H,0C6H,0C6H,0FEH,000H,000H,000H,000H,000H
						DB  080H,000H,000H,03CH,066H,0C2H,0C0H,0C0H,0C0H,0C2H,066H,03CH,00CH,006H,07CH,000H,000H
						;DB  0FFH,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
						;注意，此ACSII码经过改动，主要用来清除当前显示的字符
						DB  0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
HZK16TABLE	DW  0b2d3H,00404H,0feffH,02010H,02410H,0fe21H,02425H,0247fH,0fca5H,02425H,02425H,0fc25H,02024H,0a03dH,06024H,09e00H,00403H
						DW  0ccc5H,01002H,0f81fH,01010H,01012H,01411H,0feffH,01010H,01012H,05021H,02040H,0f83fH,04824H,04824H,04824H,0feffH,00000H
						DW  0bbb2H,00400H,0feffH,08000H,08000H,00001H,00001H,04003H,02005H,01809H,00c11H,00421H,00041H,00001H,00001H,00001H,00001H
						DW  0c7caH,0e00fH,02008H,02008H,0e00fH,02008H,02008H,0e00fH,00400H,0feffH,00001H,02009H,0f009H,00009H,00015H,00623H,0fc40H
						DW  0f7d6H,00002H,00001H,00801H,0fc7fH,00001H,00001H,00001H,01001H,0f83fH,00001H,00001H,00001H,00001H,00401H,0feffH,00000H
						DW  0f2bbH,05000H,04800H,04000H,0feffH,04000H,04002H,0483fH,04822H,04822H,05022H,0503eH,02020H,02207H,05278H,08a00H,00403H
						DW  0e6b4H,00002H,00402H,0feffH,00004H,00008H,0f80bH,01010H,02010H,04430H,0fe5fH,04090H,04010H,04010H,04010H,04011H,08010H
						DW  0dad4H,00002H,00002H,00402H,0feffH,00004H,04004H,04008H,05008H,0f813H,04030H,04050H,04090H,04010H,04410H,0fe17H,00010H
						DW  0ebc7H,04800H,0fc47H,04020H,0f823H,04000H,0feefH,00820H,0fc23H,00822H,0f823H,00822H,0f823H,0082aH,00832H,02822H,01002H
						DW  0fac4H,00009H,00009H,0fc13H,00412H,04834H,04059H,05091H,04c12H,04414H,04011H,08010H,00002H,08451H,09250H,01290H,0f00fH
						DW  0b7c8H,04000H,04004H,078feH,09010H,02411H,0fe23H,02425H,0247dH,0fca5H,02425H,02425H,0fc25H,02425H,0243dH,02422H,00c04H
						DW  0cfc8H,04000H,04040H,04030H,04010H,04000H,04000H,0a0f0H,0a010H,0a010H,01011H,01011H,01015H,0081aH,00812H,00604H,00408H
						DW  0a8bfH,00002H,02002H,0f003H,00002H,00002H,00402H,0feffH,00002H,00002H,08002H,06002H,03002H,01002H,00002H,00002H,00002H
						DW  0c7b7H,04004H,04004H,04404H,07efcH,04004H,04004H,04804H,07c7cH,04004H,04004H,04004H,04404H,07efcH,04004H,04004H,04004H
						DW  0f1c9H,02020H,02010H,02410H,0fefdH,02409H,02411H,02439H,0fc55H,02491H,02411H,02411H,0fc11H,02411H,02010H,02010H,02010H
						DW  0f4d3H,00010H,07c11H,0c4ffH,04420H,04822H,0487fH,05062H,048a2H,0443eH,04222H,04222H,0623eH,05422H,04822H,0402aH,04024H
						DW  0a8d7H,00001H,00001H,01001H,0f83fH,00002H,00402H,0feffH,00004H,00004H,0f80fH,01000H,02000H,04000H,08006H,08001H,04000H
						DW  0c3d3H,00800H,0fc3fH,00821H,00821H,00821H,0f83fH,00821H,00821H,00821H,0f83fH,00821H,00821H,00821H,00841H,02841H,01080H
						DW  0e6b0H,00808H,01c48H,0e049H,00049H,00049H,0fc7dH,00441H,04841H,04879H,05049H,03049H,0204aH,0504aH,08e4cH,00489H,00008H
						DW  0beb1H,00001H,00001H,00001H,00801H,0fc7fH,04005H,04005H,04005H,02009H,02009H,01011H,0ee2fH,004c1H,00001H,00001H,00001H
						DW  0cfbdH,04010H,02010H,02420H,0feffH,00020H,08850H,00651H,002feH,08810H,05010H,0201eH,050f0H,05050H,08810H,00e11H,00412H
						DW  0cdb5H,00810H,03c10H,0c017H,04024H,04024H,04064H,044a4H,0fe27H,02024H,02024H,02024H,09024H,01225H,04a26H,02a24H,00420H
						DW  0a7d6H,00001H,00001H,00401H,0feffH,00001H,00001H,0f03fH,02008H,02008H,04004H,08002H,00001H,08002H,0600cH,01e30H,004c0H
						DW  0d6b3H,04010H,04010H,05010H,0f813H,040fcH,04810H,0fc17H,01018H,01430H,0fed7H,01012H,01011H,01011H,01010H,05050H,02020H
						DW  0a9c0H,04010H,02010H,02410H,0fe13H,000feH,00012H,00016H,0001aH,00032H,000d2H,00012H,00012H,00012H,00014H,00054H,00028H
						DW  0b9d5H,00800H,0fc3fH,00820H,0f83fH,02022H,02022H,0f82fH,02022H,02422H,0fe3fH,08824H,05024H,03024H,00e45H,00486H,00004H
						DW  0c1b6H,02000H,02820H,0fc13H,02010H,02000H,0fe07H,092f0H,05410H,01011H,09410H,0fe17H,02010H,02014H,05018H,08c10H,00403H
						DW  0b4d0H,00000H,0fe7fH,00240H,00488H,02008H,0f00fH,00008H,00808H,0fc0fH,00800H,04800H,0e87fH,00800H,00800H,05000H,02000H
						DW  0a3b3H,00001H,01011H,02009H,0fe7fH,00240H,0e48fH,02008H,0e00fH,01001H,0f81fH,01011H,01011H,01011H,05011H,02001H,00001H
						DW  0a7b1H,08010H,08010H,08410H,0fe10H,004fdH,01412H,0fc11H,0141dH,01431H,0f4d1H,01411H,00811H,00211H,00211H,0fe50H,00020H
						DW  0b8c7H,02022H,02014H,0a0ffH,03e14H,0427fH,09415H,01015H,0d0ffH,01015H,01015H,0287fH,02814H,04836H,04c55H,08694H,00415H
						DW  0b5cfH,03800H,0c07fH,00004H,01004H,02008H,0c03fH,00001H,02002H,01004H,0f83fH,00801H,02009H,01009H,00811H,00825H,00002H
						DW  0b3cdH,08010H,04010H,04820H,0fc27H,08048H,010f9H,00812H,0fc27H,02441H,020f9H,02041H,02001H,0221aH,022e2H,01e44H,00008H
						DW  0c5b4H,00802H,09811H,0a0f8H,0fe27H,00821H,00841H,05242H,0bc77H,084d0H,00851H,00851H,01052H,0a454H,0fe77H,04250H,00000H
						DW  0b7cdH,08000H,08000H,08008H,08006H,08022H,08018H,08008H,08400H,0feffH,08000H,00001H,06001H,01002H,00804H,00c18H,00460H
						DW  0aaceH,08000H,08010H,0800cH,08004H,08400H,0feffH,00401H,00401H,00402H,08402H,06404H,02408H,00410H,00420H,02840H,01000H
						DW  0c4b5H,04010H,04010H,04422H,07e7fH,08442H,00443H,00442H,08442H,0647eH,02442H,00442H,00442H,00442H,0047eH,02842H,01000H
						DW  0d6b7H,08000H,08004H,04004H,04008H,02008H,01010H,00820H,0ee4fH,02484H,02004H,02004H,02004H,02004H,02008H,04011H,08020H
						DW  0f8c7H,00800H,0fc3fH,00020H,00828H,01824H,02022H,04021H,08020H,04021H,03022H,01824H,00828H,00020H,00420H,0fe3fH,00000H
						DW  0edb1H,00001H,00801H,0fc7fH,00001H,0f83fH,00001H,00401H,0feffH,00002H,01005H,0a00cH,04034H,030c4H,00e05H,00406H,00004H
						DW  0fbb7H,04010H,04412H,07e1fH,0a028H,01045H,01088H,01408H,0fe17H,01030H,01052H,01091H,01011H,01010H,01010H,05010H,02010H
						DW  0cfbaH,00001H,00001H,08002H,04004H,02008H,01010H,0ee2fH,004c0H,01000H,0f81fH,01010H,01010H,01010H,01010H,0f01fH,01010H
						DW  0b4b0H,04010H,02010H,00010H,0fe13H,002faH,04414H,04010H,0fe3fH,088d0H,08810H,00811H,09010H,06010H,05010H,08c50H,00423H
						DW  0fcbcH,01020H,01027H,07c39H,01441H,0fe82H,0147aH,07c24H,01027H,07cf9H,01021H,01425H,0fe22H,0102aH,01035H,09628H,07c00H
						DW  0abbdH,08010H,08010H,0f811H,00891H,01073H,0a034H,04010H,09410H,0fe1fH,01030H,01052H,090d1H,09010H,01010H,05010H,02010H
						DW  0b2b0H,00002H,00001H,0fe7fH,00240H,00482H,00002H,00402H,0feffH,02004H,02008H,02018H,04006H,08001H,04002H,0300cH,01030H
						DW  0b0d7H,04008H,04848H,0fc2bH,04008H,05018H,0f829H,0004aH,00409H,0feffH,00802H,09004H,0a00cH,04014H,03065H,00e06H,00404H
						DW  0abc8H,00001H,00001H,08002H,04004H,02008H,05010H,0ee2fH,004c1H,00001H,04001H,0e00fH,00001H,00001H,00801H,0fc7fH,00000H
						DW  0f4b8H,00800H,0fc7fH,00048H,0f853H,00852H,00862H,0f853H,00448H,0fe4fH,0144dH,0a46cH,0fc57H,04444H,04444H,05444H,00844H
						DW  0ebc0H,00002H,00401H,0feffH,04004H,09012H,01011H,09012H,05014H,0f01fH,00401H,0fe7fH,00442H,04444H,0e44fH,01440H,00840H
						DW  0e4c5H,00401H,0feffH,00414H,00414H,0047fH,00455H,07c55H,04455H,04055H,04063H,04041H,0407fH,04241H,04241H,03e7fH,00041H
						DW  0c3d6H,0f83fH,04824H,0f83fH,00001H,0fc7fH,00001H,0f01fH,01010H,0f01fH,01010H,0f01fH,01010H,0f01fH,01410H,0feffH,00000H
						DW  0d4b6H,01000H,01000H,01000H,014fcH,0fe07H,01004H,01048H,01029H,09010H,09010H,01028H,01024H,01044H,01080H,05000H,02000H
						DW  0f6b3H,00001H,00001H,00821H,00821H,00821H,00821H,0f83fH,00821H,00001H,00441H,00441H,00441H,00441H,00441H,0fc7fH,00440H
						DW  0edb4H,09010H,09010H,09010H,0fc1fH,09020H,09420H,0fe7fH,00890H,0fc11H,0087dH,00811H,0f811H,00815H,00819H,0f811H,00801H
						DW  0fcb8H,00400H,0feffH,00801H,0fc3fH,00821H,00821H,0f83fH,00821H,00821H,0f83fH,00829H,00005H,00002H,08005H,07018H,00ee0H
						DW  0bbbbH,08010H,08010H,0f011H,02012H,048fcH,0fc13H,04812H,0481eH,04832H,048d2H,0fe1fH,04010H,0a010H,01011H,00e52H,0042cH
						DW  0a5b5H,01010H,02008H,04804H,0fc3fH,00821H,00821H,0f83fH,00821H,00821H,0f83fH,00021H,00401H,0feffH,00001H,00001H,00001H
						DW  0acc6H,08000H,08020H,08020H,08020H,08420H,0fe3fH,00020H,00020H,0c03fH,04020H,04020H,04020H,04020H,04020H,04040H,04080H
						DW  0fabbH,00010H,01010H,0f811H,01011H,010fdH,01011H,01031H,01039H,01055H,01051H,01091H,01011H,01211H,01212H,00e14H,00018H
						DW  0d8d6H,03800H,0c03fH,00401H,0feffH,01001H,0f81fH,01011H,0f01fH,01011H,0f01fH,00001H,0f83fH,00001H,00401H,0feffH,00000H
						DW  0f4c6H,00001H,08400H,0fe1fH,00410H,00410H,00410H,0fc1fH,00010H,00410H,0fe1fH,00418H,00428H,00428H,00448H,0fc8fH,00408H
						DW  0d9d4H,00800H,0fc7fH,00001H,01001H,0f81fH,01011H,01011H,0f01fH,01011H,01411H,0feffH,01010H,01010H,01010H,05010H,02010H
						DW  0d4caH,02000H,02840H,02420H,02020H,0fe0fH,02000H,020e0H,0e027H,02021H,01021H,01021H,01021H,0d229H,01237H,00a22H,00400H
						DW  0a1d1H,04000H,04042H,04832H,0fc13H,04002H,04404H,0fef7H,0a010H,0a010H,0a010H,02211H,02211H,01e12H,0002cH,00644H,0fc03H
						DW  0f1d4H,00010H,0f813H,01011H,0a010H,040fcH,0a010H,01015H,04e1aH,0f435H,040d0H,04810H,0fc17H,04010H,04010H,04050H,04020H
						DW  0aad2H,00800H,0fc7fH,04004H,0f83fH,04824H,04824H,0f83fH,00002H,00402H,0feffH,02004H,02008H,04006H,08001H,06006H,01038H
						DW  0ccbcH,02010H,02012H,02022H,02423H,0ac4aH,070faH,02012H,0fc23H,02042H,070faH,0ac42H,02403H,0201aH,024e2H,0fe43H,00000H
						DW  0f8d0H,04010H,05010H,0f823H,04020H,04048H,0fcffH,02411H,0a820H,02042H,024f9H,0fe07H,04000H,0601cH,090e0H,00c41H,00402H
						DW  0f0c2H,01000H,0f80bH,0107cH,01049H,01049H,01049H,01049H,01449H,0fe49H,00448H,02448H,0f47fH,00448H,00400H,01400H,00800H
						DW  0dac4H,00001H,00001H,00001H,00401H,0fe7fH,00441H,00441H,00442H,08442H,06444H,03448H,01450H,00440H,00440H,01440H,00840H
						DW  0f8bdH,02002H,02042H,02822H,0fc2fH,02002H,02002H,020e2H,02822H,0fc2fH,02022H,02022H,02022H,02024H,02650H,0fc8fH,00000H
						DW  0ebc8H,00004H,00002H,00001H,00001H,00001H,08002H,08002H,08002H,04004H,04004H,02008H,02008H,01010H,01020H,00e40H,00480H
						DW  0e2cdH,04008H,04008H,04008H,04010H,0401fH,06021H,05021H,04862H,04692H,0420aH,04004H,04008H,04010H,04020H,04040H,04000H
						DW  0f8cdH,00400H,0fe7fH,00440H,00c42H,08c62H,05454H,05454H,02448H,02448H,05454H,04c52H,08c62H,00461H,00442H,01440H,00840H
						DW  0c6bcH,04000H,04020H,04010H,04010H,04000H,04400H,0fef7H,04010H,04010H,04010H,04010H,04012H,04014H,04018H,04010H,04000H
						DW  0e3cbH,08020H,0fc3eH,02049H,0f09fH,01010H,0f01fH,01010H,0f01fH,01010H,0f01fH,02408H,0feffH,02008H,02008H,02010H,02020H
						DW  0d4d2H,00000H,00804H,00842H,00843H,00841H,00840H,00840H,00840H,01041H,01042H,01044H,02048H,03050H,04860H,08401H,00406H
						DW  0c2cfH,00400H,0feffH,00002H,00002H,00002H,08002H,04002H,03002H,01002H,00002H,00002H,00002H,00002H,00002H,00002H,00002H
						DW  0b4d7H,04008H,05008H,04808H,04048H,04428H,0fe2fH,04008H,04008H,0a018H,0a028H,01049H,010c9H,00809H,00e0aH,0040cH,00008H
						DW  0acccH,00001H,00401H,0feffH,00001H,08002H,04004H,0300aH,00e31H,004c0H,00002H,01029H,00829H,02428H,02448H,0e007H,00000H
						DW  0ecbcH,04010H,04010H,0a010H,0a010H,010fdH,00e12H,0f435H,00030H,04058H,04856H,04c91H,04811H,05011H,00410H,0fe1fH,00010H
						DW  0e9b2H,00001H,00401H,0feffH,04005H,02009H,01011H,0fe3fH,014d0H,01010H,0f01fH,01010H,01010H,0f01fH,00400H,0feffH,00000H
						DW  0e9b2H,00001H,00401H,0feffH,04005H,02009H,01011H,0fe3fH,014d0H,01010H,0f01fH,01010H,01010H,0f01fH,00400H,0feffH,00000H
logopic			db 011H, 011H, 011H, 011H, 011H, 011H, 011H, 02dH, 010H, 035H, 013H, 00dH, 032H, 010H, 043H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
						db 011H, 011H, 011H, 011H, 043H, 042H, 050H, 020H, 024H, 03bH, 00cH, 00aH, 052H, 06dH, 072H, 032H, 010H, 02dH, 011H, 011H, 011H, 011H, 011H, 011H
						db 011H, 02dH, 042H, 050H, 060H, 06fH, 02bH, 05dH, 05dH, 02bH, 053H, 00aH, 00aH, 00aH, 00aH, 052H, 031H, 072H, 06eH, 042H, 02dH, 011H, 011H, 011H
						db 018H, 048H, 034H, 02bH, 05dH, 02bH, 02bH, 02bH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 031H, 03aH, 025H, 011H, 011H
						db 073H, 05dH, 02bH, 02bH, 02bH, 02bH, 03bH, 02bH, 02bH, 03bH, 053H, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 059H, 011H, 011H
						db 02eH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 02eH, 02bH, 05dH, 05dH, 02bH, 02bH, 02bH, 02bH, 02bH, 03bH, 053H, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 02eH, 02bH, 06fH, 07aH, 062H, 04eH, 062H, 05dH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 069H, 045H, 016H, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 02eH, 05dH, 051H, 02fH, 038H, 00fH, 049H, 055H, 02bH, 03bH, 053H, 00aH, 00aH, 00aH, 054H, 041H, 04bH, 022H, 00bH, 00aH, 00aH, 017H, 011H, 011H
						db 06bH, 05dH, 01bH, 06cH, 012H, 05dH, 05dH, 05bH, 027H, 05dH, 053H, 03eH, 00aH, 05aH, 02aH, 00aH, 00aH, 045H, 06cH, 076H, 00aH, 017H, 011H, 011H
						db 02eH, 05dH, 049H, 044H, 02bH, 02bH, 05dH, 027H, 070H, 05dH, 053H, 00aH, 00aH, 058H, 041H, 00aH, 00aH, 02cH, 014H, 05fH, 00aH, 017H, 011H, 011H
						db 06bH, 02bH, 02bH, 01aH, 055H, 023H, 030H, 07cH, 05cH, 05dH, 053H, 03eH, 00aH, 03fH, 074H, 01eH, 069H, 065H, 065H, 00aH, 00aH, 017H, 011H, 011H
						db 02eH, 02bH, 02bH, 02bH, 034H, 04fH, 071H, 05cH, 012H, 02bH, 053H, 00aH, 00aH, 069H, 033H, 02aH, 00eH, 045H, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 06bH, 03bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 02eH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 03bH, 053H, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 06bH, 02bH, 02bH, 03bH, 02bH, 02bH, 03bH, 02bH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 02eH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 03bH, 053H, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 03cH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 03bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 017H, 011H, 011H
						db 021H, 024H, 05dH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 02bH, 053H, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 06dH, 032H, 011H, 011H
						db 057H, 028H, 05eH, 012H, 05dH, 02bH, 02bH, 02bH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 00aH, 00aH, 016H, 040H, 078H, 057H, 011H, 011H
						db 011H, 011H, 057H, 025H, 060H, 023H, 01cH, 02bH, 02bH, 02bH, 053H, 03eH, 00aH, 00aH, 00aH, 00aH, 02cH, 03aH, 04aH, 02dH, 011H, 011H, 011H, 011H
						db 011H, 011H, 011H, 011H, 06aH, 07bH, 039H, 053H, 05dH, 02bH, 053H, 00aH, 00aH, 00aH, 00aH, 04bH, 06eH, 01fH, 011H, 011H, 011H, 011H, 011H, 011H
						db 011H, 011H, 011H, 011H, 011H, 011H, 047H, 061H, 00fH, 05dH, 053H, 00aH, 00aH, 06dH, 067H, 077H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
						db 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 056H, 01dH, 015H, 046H, 075H, 078H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
						;
;===============================硬盘==================================================================
;硬盘主引导扇区的数据
MBR									DB 033H,0C0H,08EH,0D0H,0BCH,000H,07CH,0FBH,050H,007H,050H,01FH,0FCH,0BEH,01BH,07CH
										DB 0BFH,01BH,006H,050H,057H,0B9H,0E5H,001H,0F3H,0A4H,0CBH,0BEH,0BEH,007H,0B1H,004H 
										DB 038H,02CH,07CH,009H,075H,015H,083H,0C6H,010H,0E2H,0F5H,0CDH,018H,08BH,014H,08BH 
										DB 0EEH,083H,0C6H,010H,049H,074H,016H,038H,02CH,074H,0F6H,0BEH,010H,007H,04EH,0ACH 
										DB 03CH,000H,074H,0FAH,0BBH,007H,000H,0B4H,00EH,0CDH,010H,0EBH,0F2H,089H,046H,025H 
										DB 096H,08AH,046H,004H,0B4H,006H,03CH,00EH,074H,011H,0B4H,00BH,03CH,00CH,074H,005H 
										DB 03AH,0C4H,075H,02BH,040H,0C6H,046H,025H,006H,075H,024H,0BBH,0AAH,055H,050H,0B4H 
										DB 041H,0CDH,013H,058H,072H,016H,081H,0FBH,055H,0AAH,075H,010H,0F6H,0C1H,001H,074H 
										DB 00BH,08AH,0E0H,088H,056H,024H,0C7H,006H,0A1H,006H,0EBH,01EH,088H,066H,004H,0BFH 
										DB 00AH,000H,0B8H,001H,002H,08BH,0DCH,033H,0C9H,083H,0FFH,005H,07FH,003H,08BH,04EH 
										DB 025H,003H,04EH,002H,0CDH,013H,072H,029H,0BEH,046H,007H,081H,03EH,0FEH,07DH,055H 
										DB 0AAH,074H,05AH,083H,0EFH,005H,07FH,0DAH,085H,0F6H,075H,083H,0BEH,027H,007H,0EBH 
										DB 08AH,098H,091H,052H,099H,003H,046H,008H,013H,056H,00AH,0E8H,012H,000H,05AH,0EBH 
										DB 0D5H,04FH,074H,0E4H,033H,0C0H,0CDH,013H,0EBH,0B8H,000H,000H,000H,000H,000H,000H 
										DB 056H,033H,0F6H,056H,056H,052H,050H,006H,053H,051H,0BEH,010H,000H,056H,08BH,0F4H 
										DB 050H,052H,0B8H,000H,042H,08AH,056H,024H,0CDH,013H,05AH,058H,08DH,064H,010H,072H 
										DB 00AH,040H,075H,001H,042H,080H,0C7H,002H,0E2H,0F7H,0F8H,05EH,0C3H,0EBH,074H,049H 
										DB 06EH,076H,061H,06CH,069H,064H,020H,070H,061H,072H,074H,069H,074H,069H,06FH,06EH 
										DB 020H,074H,061H,062H,06CH,065H,000H,045H,072H,072H,06FH,072H,020H,06CH,06FH,061H 
										DB 064H,069H,06EH,067H,020H,06FH,070H,065H,072H,061H,074H,069H,06EH,067H,020H,073H 
										DB 079H,073H,074H,065H,06DH,000H,04DH,069H,073H,073H,069H,06EH,067H,020H,06FH,070H 
										DB 065H,072H,061H,074H,069H,06EH,067H,020H,073H,079H,073H,074H,065H,06DH,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,08BH,0FCH,01EH,057H,08BH,0F5H,0CBH,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
			MBR_PRI				DB 080H,001H,001H,000H
			MBR_PRI_TYPE	DB 0CH				;不能规定分区类型
			MBR_PRI_CHS		DB 0FEH,0FFH,0FFH,03FH,000H,000H,000H,037H,016H,071H,002H
			MBR_EXT				DB 000H,000H,0C1H,0FFH,00FH
			M_EXT_ENDHEAD	DB 0FEH
										DB 0FFH,0FFH
			MBR_EXT_START	DD 02711676H
			MBR_EXT_MAX		DD 00H
										DB 000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,055H,0AAH 	
;扩展驱动器参数
;48H	Extended DRIVE PARAMETERS
EDPARA_TABLE				DW	0040H			;缓冲区大小，大于30才可能返回EDD
			EDPARA_FLAG		DW	00H				;信息标志
			EDPARA_CYL		DD	00H				;可寻址磁柱的块数
			EDPARA_HEADS	DD	00H				;可寻址磁头总数
			EDPARA_SECS		DD	00H				;每磁道的扇区数
			EDPARA_TOTAL	DD	00H				;可寻址的扇区总数（低位），最大可表示2048G
										DD	00H				;我想,在本程序有效期内还用不到高位，所以没有定义高位
			EDPARA_PERSEC	DW	00H				;每磁道的扇区数
			EDD_OFFSET		DW	00H				;指向增强的磁盘驱动器配置参数的偏移(Enhanced Disk Drive/ configuration parameters)
			EDD_SEG				DW	00H				;															 段址
;EDD_TABLE												;Enhanced Disk Drive/ configuration parameters
			EDD_BASEPORT	DW	00H
			EDD_CTRLPORT	DW	00H
			EDD_DRVFLAGS	DB	00H				;drive flags
			EDD_PRINFO		DB	00H				;proprietary information
			EDD_IRQ				DB	00H				;IRQ for drive
			EDD_TRANSECS	DB	00H				;sector count for multi-sector transfers
			EDD_DMA				DB	00H 			;DMA control	
			EDD_IOCTRL		DB	00H				;programmed I/O control
 			EDD_DRVOPTION	DW	00H				;drive options
			EDD_RESERVED	DW	00H				;2 BYTEs	reserved (0)
			EDD_EVERSION	DB	00H				;extension revision level		
			EDD_CHECKSUM	DB	00H				;2's complement checksum of bytes 00h-0Eh
;扩展磁盘服务的磁盘地址包
;42h 43h   Extended	Disk Address Packet
EDAP_TABLE					DB	10H				;包的大小
			EDAP_RESERVE1	DB	00H				;保留
			EDAP_RWCOUNT	DB	00H				;要读写的扇区数	1~127
			EDAP_RESERVE2	DB	00H				;保留
			EDAP_OFFSET		DW	00H				;传送的内存偏移
			EDAP_SEG			DW	00H				;传送的内存段址
			EDAP_RWLBAL		DW	00H				;欲读写逻辑扇区（低位）
			EDAP_RWLBAH		DW	00H				;												 （高位）
;对双网的offset的值
OFFSETVAL						DD	00H
MYOFFSETVAL					DD	00H				;对OS不可见的OFFSET区域，gcd.zone[7]
PART_MAXLBA					DD	00H				;每个网的最大可用磁盘空间（内外）
;用户的MBR信息缓冲区
USER_MBR						DB 446 DUP(0)
			USER_PRI			DB 080H,001H,001H,000H
			USER_PRI_TYPE	DB 00H				;不能规定分区类型
			USER_PRI_CHS	DB 0FEH,0FFH,0FFH,03FH,000H,000H,000H,037H,016H,071H,002H
			USER_EXT			DB 000H,000H,0C1H,0FFH,00FH,0FEH,0FFH,0FFH
			USER_EXT_START	DD 00H
			USER_EXT_MAX		DD 00H
										DB 000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,000H,000H 
										DB 000H,000H,000H,000H,000H,000H,055H,0AAH
;;===============================EEPROM中的数据 结构==================================================================
;CARD_DATA		;单片机中EEPROM的数据
	NEI_OFFSET						DD	00H			;NEI	OFFSET
												DD	00H			;NEI	FRONT
												DD	00H			;NEI	BEHIND
	NEI_MAX								DD	00H			;NEI	MAX
	WAI_OFFSET						DD	00H			;WAI	OFFSET
												DD	00H			;WAI	FRONT
												DD	00H			;WAI	BEHIND
	WAI_MAX								DD	00H			;WAI	MAX
												DB	80 DUP(0) 
	MYZONE_OFFSET					DD	00H			;MYZONE	OFFSET
												DD	00H			;MYZONE	FRONT
												DD	00H			;MYZONE	BEHIND
	MYZONE_MAX						DD	00H			;MYZONE	MAX
	NRZONE								DB	02H			;OS NUMBER
	NRHEAD								DB	10H			
	CD_SECPERCYL					DB	03FH
	B_SWAP								DB	00H
	CD_RESERVED						DB	122 DUP (0)	;[16*16-8*16-4-2]
	CD_SIG								DW	0A55AH
ENDDATA									DW  0AA55H						;结束标志
;#############################################  数据段结束  #####################################################
;
;#############################################  代码段开始  #####################################################
;+++++++++++++++++++++++++++++++	主程序开始	++++++++++++++++++++++++++++++++++++++++++
.CODE
START:
	MOV	AX,@DATA
	MOV	DS,AX	
	;;;;
	PUSHA					;.386 CODE
	PUSHFD
	MOV	AX,8000H
	MOV	ES,AX
	MOV	SI,OFFSET DATABEGIN
	MOV	DI,OFFSET DATABEGIN
	MOV	CX,OFFSET ENDDATA
	MOV	AX,OFFSET DATABEGIN
	SUB	CX,AX
	REP	MOVSB
	MOV	AX,8000H
	MOV	DS,AX
	;
	CALL	MAIN_MOUDLE
	;
	POPFD
	POPA
	MOV	 AX,4C00H
	INT	21H
;+++++++++++++++++++++++++++++++	主程序结束	++++++++++++++++++++++++++++++++++++++++++
;
;;+++++++++++++++++++++++++++++++	子程序开始	++++++++++++++++++++++++++++++++++++++++++
;子程序有六个部分：1 显示部分子程序  2 硬盘控制子程序  3 控制卡的子程序 
;									 4 读取CMOS信息(为了以后扩展，后加的子程序也放在这个部分)
;									 5 为主程序直接调用的界面子程序
;									 6 主干模块
;------------------主干模块 开始------------------------------------
MAIN_MOUDLE	PROC	NEAR
	;显示的初始化工作
	CALL	INITVIDEO				;显示模式及颜色寄存器准备完毕
	;;;;;;;;;;;;;;;
	;读硬盘的基本属性
	CALL	RESETDISK
	CALL	GETDISKATTR
	;JC	HD_ERROR_NOPRIHD	;错误，没有找到硬盘或者不在主盘 error#1 
	JC	MERROR1
	CMP	AL,1
	;JZ	HD_ERROR_NOEXTSUPPORT	;错误，不支持扩展，版本太低 error#2
	JZ	MERROR2
	MOV	AX,EDD_BASEPORT
	CMP	AX,01F0H
	;JNZ	HD_ERROR_NOPRIHD	;错误，没有找到硬盘或者不在主盘 error#1
	JNZ	MERROR1
	MOV	SI,OFFSET EDPARA_TOTAL
	MOV	AX,[SI+2]
	MOV	CL,5
	SHR	AX,CL	;计算硬盘大小(G)
	CMP	AX,032H ;与50G比
	;JB	HD_ERROR_LESS60G	;错误，不支持小于60G的硬盘 error#3
	JB	MERROR3
	;MOV	SI,OFFSET EDPARA_HEADS
	;MOV	AL,BYTE PTR [SI]
	;CMP	AL,0FH
	;JZ	HD_ERROR_15HEADS	;错误，不支持磁头为15的硬盘 error#4
	;JZ	MERROR4
	;;;;;;;;;;;;;;;
	;确定卡的存在
	CALL	IDENTIFYCARD
	CMP	BL,0
	;JZ	CARD_ERROR_NOCARD	;错误，卡不存在或非神郁卡 error#5
	JZ	MERROR5
	;;;
	;;;
	;卡和硬盘都存在，开始填充各项数据
	CALL	CALOFFSET	;计算OFFSET 和MYOFFSET的值，填充数据结构(卡和硬盘的)
	CALL	READUSERMBR ;读取用户的MBR信息，保存到USER_MBR
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;舞台搭建完毕，演员开始登场;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL	GETCARDSTATUS		;判断卡是否装过(即判断单片机有没有安装的标志)
	AND	BX,0FF00H
	;JZ	NOT_SETUP					;未安装，跳转到未安装处理模块 moudel#1
	JZ	MMOUDEL1
	CALL	COMPAREMBR			;比较用户的分区表和规定的是否相同
	CMP	AX,0
	;JNZ	MBR_NOTMATCH			;分区表不相同 moudel#2
	JNZ	MMOUDEL2
	;##AMEND 2005-7-5 7:51 在安装状态下，比较外网的分区表
	call	getcardstatus		;确定是否在安装状态
	test	bx,0010h				;不在安装状态 不用比较
	jnz	comparenext
	;
	mov	eax,edpara_total		;放开读写
	sub	eax,1
	mov	nei_max,eax
	;xor	eax,eax
	;mov	wai_offset,eax
	call	writeEEPROM
	;
	;
	call readuserwaimbr		;读外网的分区表
	;读完，写回单片机，读写重新抓回
	mov	si,offset offsetval
	mov	ax,word ptr [si]
	mov	bx,word ptr [si+2]
	sub	bx,2
	mov	si,offset nei_max
	mov	[si],ax
	mov	[si+2],bx
	;mov	eax,offsetval
	;mov	wai_offset,eax
	call	writeEEPROM
	;
	call	comparembr			;比较外网的分区表，不同则跳转
	cmp	ax,0
	jnz	mmoudel2
	;
comparenext:
	CALL	COMPAREOFFSETVAL	;比较EEPROM中的offsetwai的值和计算的是否相同
	CMP	BX,0
	;JZ	OFFSETVAL_NOTMATCH	;OFFSET值不同跳转处理moudel#3
	JZ	MMOUDEL3
	;;主角一号，显示判断开始
	;判断CMOS8DH处bit0 bit1是否全为0（即第一次开机，或者当前没有一个系统处在挂起中）
	;并且CMOS8EH的bit0 为0（这位由本软件所用，用来表示以下情况发生：向卡发送了切换的消息，且软件使PC关机而后自动唤醒）
	;    在这种情况下，界面不需要再出来.
	CALL	READCMOS8D8EH
	CMP	AL,00H
	;JNZ	MAIN_MOUDEL_DNEIWAI		;需要显示，跳转
	JNZ	DISNW
	CALL	CLEARCMOS8E		;清cmos8eh bit0
	;JMP	MAIN_MOUDEL_EXIT
	JMP	MAINEXIT
	;显示
;MAIN_MOUDEL_DNEIWAI:
DISNW:
	CALL	DISP_MAIN_SEL			;内外网选择界面
MAIN_MOUDEL_GETUSERIN:
	CALL	GETSELECT
	CMP	AL,'1'						;选择外网
	JZ	MAIN_MOUDEL_WAISEL
	CMP	AL,'2'						;选择内网
	JZ	MAIN_MOUDEL_NEISEL
	CMP	AX,2F00H
	JZ	DISP_VERSION				;显示版本 ##version
	JMP	MAIN_MOUDEL_GETUSERIN
MAIN_MOUDEL_WAISEL:
	MOV	AL,080H
	JMP	MAIN_SELECT_DEAL
MAIN_MOUDEL_NEISEL:
	MOV	AL,00H
MAIN_SELECT_DEAL:
	PUSH	AX
	CALL	JUDGEOSSTATUS
	POP	AX
	AND	BL,080H
	XOR	AL,BL
	;JZ	MAIN_MOUDEL_EXIT	;所选网与当前的网状态相同，交出控制权
	JZ	MAINEXIT
	;;;;主角二号，所选网与当前的网状态不同，处理如下
	CALL	SETCMOS8E					;设置cmos8e bit0，下次启动的时候不显示界面
	CALL	TELLCARDSWITCH	;下次掉电后切换
	CALL	RESETDISK				;在关机前重启控制器，使之复位
	CALL	QDI_SHUTDOWN	;关机然后自动唤醒，只对QDI的915主板有用
	JMP	$											;等待关机 自动唤醒
;主角三号：moudel#1~3的处理
;NOT_SETUP:				;moudel#1 第一次安装
DISP_VERSION:
	MOV	DX,OFFSET STR_VERSION
	CALL	DISP_ERROR
	CALL	GETSELECT
	JMP	DISNW
MMOUDEL1:
	MOV	DX,OFFSET STR_SETUP
	CALL	DISP_SETUP
	JMP	SETUP_SYBIOS
;MBR_NOTMATCH:			;moudel#2 分区表不符合，安装
MMOUDEL2:
	MOV	DX,OFFSET STR_SETUP1
	CALL	DISP_SETUP
	JMP	SETUP_SYBIOS
;OFFSETVAL_NOTMATCH:		;moudel#3 卡中OFFSET不对，安装
MMOUDEL3:
	MOV	DX,OFFSET STR_UNMATCHOFF
	CALL	DISP_SETUP
SETUP_SYBIOS:				;准备安装
	CALL	GETCARDSTATUS		;确定是否在安装状态
	TEST	BX,0010H
	;JNZ	CARD_ERROR_NOT_SETUP			;错误，不在安装状态 error#6
	JNZ	MERROR6
	;安装：填分区表，写EEPROM
	;放开读写，写单片机的第一区域
	;##AMEND	2005-7-5 8:34
	mov	eax,edpara_total		;放开读写
	sub	eax,1
	mov	nei_max,eax
	;xor	eax,eax
	;mov	wai_offset,eax
	call	writeEEPROM
	;
	CALL	READUSERMBR
	CALL	FILLMBR
	CALL	READUSERWAIMBR
	CALL	FILLWAIMBR
	;
	mov	si,offset offsetval
	mov	ax,word ptr [si]
	mov	bx,word ptr [si+2]
	sub	bx,2
	mov	si,offset nei_max
	mov	[si],ax
	mov	[si+2],bx
	;mov	eax,offsetval
	;mov	wai_offset,eax
	;
	CALL	WRITEEEPROM
	CMP	BX,1
	;JNZ	EEPROM_ERROR_WR		;错误，写失败 error#7
	JNZ	MERROR7
	;JMP	MAIN_MOUDEL_DNEIWAI
	JMP	DISNW
	;;;;;;;;;;;;;看看配角的表演;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;错误的显示及处理 error#1~7
;HD_ERROR_NOPRIHD:							
MERROR1:											;error#1,硬盘不是主盘或不存在
	MOV	DX,OFFSET STR_NOPRIHD
	CALL	DISP_ERROR	
	CALL	GETSELECT							;按任意键退出，交出控制权利
	;JMP	MAIN_MOUDEL_EXIT
	JMP	MAINEXIT
;HD_ERROR_NOEXTSUPPORT:				;error#2,不支持扩展读写
MERROR2:
	MOV	DX,OFFSET STR_NOSUPEXTHD
	CALL	DISP_ERROR	
	JMP	$											;不交出控制权利
;HD_ERROR_LESS60G:							;error#3,不支持60G以下硬盘
MERROR3:
	MOV	DX,OFFSET STR_NOSUPPORTHD
	CALL	DISP_ERROR	
	JMP	$					;不交出控制权利
;HD_ERROR_15HEADS:							;error#4,不支持磁头为15的硬盘 
;MERROR4:
	;MOV	DX,OFFSET STR_NOSUP15
	;CALL	DISP_ERROR	
	;JMP	$					;不交出控制权利
;CARD_ERROR_NOCARD:						;error#5,卡不存在或非神郁卡 	
MERROR5:
	MOV	DX,OFFSET STR_NOCARD
	CALL	DISP_ERROR
	CALL	GETSELECT							;按任意键退出，交出控制权利
	;JMP	MAIN_MOUDEL_EXIT
	JMP	MAINEXIT
;CARD_ERROR_NOT_SETUP:					;error#6，不在安装状态 
MERROR6:
	MOV	DX,OFFSET STR_NOT_SETUOST
	CALL	DISP_ERROR	
	JMP	$					;不交出控制权利
;EEPROM_ERROR_WR:					;error#7，写失败 
MERROR7:	
	MOV	DX,OFFSET STR_WEPP_ERROR
	CALL	DISP_ERROR	
	JMP	$					;不交出控制权利
;;;;;
;;;;谢幕;;;;;
;MAIN_MOUDEL_EXIT:
MAINEXIT:
	;返回到3号显示模式
	MOV	AX,0003H
	INT	10H
	RET
MAIN_MOUDLE ENDP
;------------------主干模块 结束------------------------------------

;------------------界面子程序 开始------------------------------------
;****************************************************;
;*子程序名：	DISP_ERROR														**
;*功能：			显示无效硬盘													**
;*入口参数：	DX=错误信息的地址											**
;*出口参数：																				**
;*使用说明：  																			**
;****************************************************;
DISP_ERROR	PROC	NEAR
	PUSH	DX
	PUSH	BP
	MOV	BP,SP
	CALL	DISP_FRAME
	MOV	AX,RED						;显示字的颜色
	PUSH	AX
	;取字符串的地址
	MOV	AX,WORD PTR [BP+2]	;显示字
	PUSH	AX
	MOV	BX,FRAME_BOTTOM
	MOV	AX,FRAME_TOP
	SUB	BX,AX
	SHR	BX,1
	ADD	AX,BX
	SUB	AX,8								;字符高度是16，取一半
	PUSH	AX								;计算字符串的坐标 Y 值
	;取字符串地址
	MOV	AX,WORD PTR [BP+2]					;计算字符串的坐标 X 值
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	CX,FRAME_LEFT
	MOV	DX,FRAME_RIGHT
	SUB	DX,CX
	SUB	DX,AX
	SHR	DX,1
	ADD	DX,CX
	MOV	AX,DX			
	PUSH	AX
	CALL	PUTSTR
	ADD	SP,8	
	;
	MOV	SP,BP
	POP	BP
	POP	DX
	RET
DISP_ERROR	ENDP
;****************************************************;
;*子程序名：	DISP_MAIN_SEL													**
;*功能：			显示内外网选择界面										**
;*入口参数：	无																		**
;*出口参数：																				**
;*使用说明：  																			**
;****************************************************;
DISP_MAIN_SEL	PROC	NEAR
	CALL	DISP_FRAME
	;设置内外网选择菜单
	;外网
	MOV	AX,RED
	PUSH	AX
	MOV	DX,OFFSET	STR_SYWAI
	PUSH	DX
	MOV	AX,190
	PUSH	AX
	MOV	AX,255
	PUSH	AX
	CALL	PUTBUTTON
	ADD	SP,8
	;内网
	MOV	AX,GREEN
	PUSH	AX
	MOV	DX,OFFSET	STR_SYNEI
	PUSH	DX
	MOV	AX,260
	PUSH	AX
	MOV	AX,255
	PUSH	AX
	CALL	PUTBUTTON
	ADD	SP,8
	RET
DISP_MAIN_SEL	ENDP
;****************************************************;
;*子程序名：	DISP_FRAME														**
;*功能：			显示主框架														**
;*入口参数：	无																		**
;*出口参数：																				**
;*使用说明：  框架的位置是自由调整的，看PUTWINDOW的	**
;*						函数说明															**
;****************************************************;
DISP_FRAME	PROC	NEAR
	;设置窗口及标题栏
	MOV	AX,WHITE
	PUSH	AX
	MOV	DX,OFFSET	STR_CAP			;设置标题
	PUSH	DX
	MOV	AX,LIGHTGRAY
	PUSH	AX
	MOV	AX,FRAME_BOTTOM						;BOTTOM
	PUSH	AX
	MOV	AX,FRAME_RIGHT						;RIGHT
	PUSH	AX
	MOV	AX,FRAME_TOP						;TOP
	PUSH	AX
	MOV	AX,FRAME_LEFT						;LEFT
	PUSH	AX
	CALL	PUTWINDOW
	ADD	SP,14
	RET
DISP_FRAME	ENDP
;****************************************************;
;*子程序名：	DISP_SETUP														**
;*功能：			显示安装界面													**
;*入口参数：	DX=显示的第一行字符串的地址						**
;*出口参数：																				**
;*使用说明：  																			**
;****************************************************;
DISP_SETUP	PROC	NEAR
	PUSH	DX
	PUSH	BP
	MOV	BP,SP 						;[BP+2]=显示第一行的字符串地址
	CALL	DISP_FRAME
	MOV	AX,YELLOW						;显示字的颜色
	PUSH	AX
	;取字符串的地址
	MOV	AX,WORD PTR [BP+2]	;显示字
	PUSH	AX
	MOV	BX,FRAME_BOTTOM
	MOV	AX,FRAME_TOP
	SUB	BX,AX
	SHR	BX,1
	ADD	AX,BX
	SUB	AX,24								;字符高度是16，取一个半
	PUSH	AX								;计算字符串的坐标 Y 值
	;取字符串地址
	MOV	AX,WORD PTR [BP+2]					;计算字符串的坐标 X 值
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	CX,FRAME_LEFT
	MOV	DX,FRAME_RIGHT
	SUB	DX,CX
	SUB	DX,AX
	SHR	DX,1
	ADD	DX,CX
	MOV	AX,DX			
	PUSH	AX
	CALL	PUTSTR
	PUSH	BP
	MOV	BP,SP
	MOV	DX,[BP+2]					;X
	MOV	BX,[BP+4]					;Y
	POP	BP
	ADD	SP,8
	;
	MOV	AX,YELLOW
	PUSH	AX
	MOV	AX,OFFSET STR_SETUP2
	PUSH	AX
	ADD	BX,32
	PUSH	BX					;Y
	MOV	YCUR,BX
	PUSH	DX					;X
	MOV	XCUR,DX
	CALL	PUTSTR
	ADD	SP,8
	;
	MOV	AX,OFFSET STR_SETUP2
	PUSH	AX
	CALL	NEAR PTR STRLEN
	ADD	SP,2
	MOV	CL,3
	SHL	AX,CL								;字符的宽度为8，可以这样做
	MOV	DX,XCUR
	ADD	DX,AX
	MOV	XCUR,DX
	MOV	BX,YCUR
	;显示编辑框
	MOV	AX,2
	PUSH	AX
	PUSH	BX
	PUSH	DX
	CALL	PUTEDITBOX
	ADD	SP,6
	;接受用户输入
	CALL	GETUSERIN
	MOV	SP,BP
	POP	BP
	POP	DX
	RET
DISP_SETUP	ENDP
;****************************************************;
;*子程序名：	GETUSERIN															**
;*功能：			获取用户的输入,显示										**
;*入口参数：																				**
;*出口参数：	al='Y' 																**
;****************************************************;	 	
GETUSERIN	PROC	NEAR
	XOR	BX,BX
GUI_LOOP:
	XOR	AX,AX
	INT	16H
	CMP	AL,40H
	JNC	GUI_DISPLAY
	CMP	BL,'Y'				;bl中存放的是上一次的输入
	JNZ	GUI_LOOP
	CMP	AL,0DH
	JZ	GUI_EXIT
GUI_DISPLAY:
	CMP	AL,60H
	JC	GUI_2CAP			;转换为大写
	SUB	AL,20H
GUI_2CAP:
	CMP	AL,'Y'
	JZ	GUI_DISINPUT
	;清除上次的显示
	MOV	CX,WHITE
	PUSH	CX
	MOV	CX,0FFH
	PUSH	CX
	MOV	CX,YCUR
	PUSH	CX
	MOV	CX,XCUR
	PUSH	CX
	CALL	PUTASCII
	ADD	SP,8
	MOV	AL,00H;在下面运行的程序中，什么都不显示
GUI_DISINPUT:
	MOV	BL,AL				;将本次输入放入bl
	;在当前光标处显示输入的值
	PUSH	BX
	;显示输入的值
	MOV	CX,RED
	PUSH	CX
	XOR	AH,AH
	PUSH	AX
	MOV	AX,YCUR
	PUSH	AX
	MOV	AX,XCUR
	PUSH	AX
	CALL	PUTASCII
	ADD	SP,8
	POP	BX
	JMP	GUI_LOOP
GUI_EXIT:
	MOV	AL,BL
	RET
GETUSERIN	ENDP
;****************************************************;
;*子程序名：	GETSELECT															**
;*功能：			获取用户的选择												**
;*入口参数：																				**
;*出口参数：	AL=选择																**
;****************************************************;	
GETSELECT	PROC	NEAR             ;从键盘上取得用户选择
	XOR   AX,AX
	INT  16H
	RET                    
GETSELECT	ENDP
;------------------界面子程序 结束------------------------------------
;------------------读取CMOS信息 开始------------------------------------
;****************************************************;
;*子程序名：	READCMOS8D8EH()												**
;*功能：			读取CMOS8DH的信息，返回是否						**
;*入口参数：	无																		**
;*出口参数：	al=01 允许显示				AL=0 不允许显示	**
;****************************************************;
READCMOS8D8EH	PROC	NEAR
	MOV	DX,072H
	MOV	AL,0DH
	OUT	DX,AL
	MOV	DX,073H
	IN	AL,DX
	TEST	AL,03H				;
	MOV	AL,00H
	JNZ	RCMOS_DIS_NOTAGREE
	MOV	DX,072H
	MOV	AL,0EH
	OUT	DX,AL
	MOV	DX,073H
	IN	AL,DX
	TEST AL,01H
	MOV	AL,00H
	JNZ	RCMOS_DIS_NOTAGREE
	MOV	AL,01H
RCMOS_DIS_NOTAGREE:	
	RET
READCMOS8D8EH	ENDP
;****************************************************;
;*子程序名：	CLEARCMOS8E()													**
;*功能：			清除8EH bit0													**
;*入口参数：																				**
;*出口参数：																				**
;****************************************************;
CLEARCMOS8E	PROC	NEAR
	MOV	DX,072H
	MOV	AL,0EH
	OUT	DX,AL
	jmp	$+2
	MOV	DX,073H
	IN	AL,DX
	AND	AL,0FEH
	MOV	BL,AL
	;
	MOV	DX,072H
	MOV	AL,0EH
	OUT	DX,AL
	jmp	$+2
	MOV	DX,073H	
	MOV	AL,BL
	OUT	DX,AL
	RET
CLEARCMOS8E	ENDP	
;****************************************************;
;*子程序名：	SETCMOS8E	()													**
;*功能：			设置8EH bit0													**
;*入口参数：																				**
;*出口参数：																				**
;****************************************************;
SETCMOS8E	PROC	NEAR
	MOV	DX,072H
	MOV	AL,0EH
	OUT	DX,AL
	MOV	DX,073H
	IN	AL,DX
	OR	AL,01H
	MOV	BL,AL
	;
	MOV	DX,072H
	MOV	AL,0EH
	OUT	DX,AL
	MOV	DX,073H	
	MOV	AL,BL
	OUT	DX,AL
	RET
SETCMOS8E	ENDP	
;****************************************************;
;*子程序名：	QDI_SHUTDOWN	()											**
;*功能：			关机 																	**
;*入口参数：																				**
;*出口参数：																				**
;*程序说明：在QDI915主板上，关机,只对这款（系列）有	**
;*					效，非通用程序													**
;****************************************************;
QDI_SHUTDOWN	PROC	NEAR
	CLI
	MOV	DX,0404H
	IN	AX,DX
	OR	AX,03C00H
	MOV	DX,0404H
	OUT	DX,AX
	STI
	RET
QDI_SHUTDOWN	ENDP
;------------------读取CMOS信息 结束------------------------------------
;------------------控制卡的子程序 开始------------------------------------
;****************************************************;
;*子程序名：	JUDGEOSSTATUS													**
;*功能：			判断当前状态													**
;*入口参数：																				**
;*出口参数：	判断BL的最高位，1为外 0为内						**
;****************************************************;
;
JUDGEOSSTATUS	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;判断卡的状态
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,07H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	PUSH	BX
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	POP	BX
	RET
JUDGEOSSTATUS	ENDP
;****************************************************;
;*子程序名：	TELLCARDSWITCH												**
;*功能：			告诉卡下次关机后切换									**
;*入口参数：																				**
;*出口参数：																				**
;****************************************************;
TELLCARDSWITCH	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;设置卡在下次关机后切换
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,05H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	PUSH	BX
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	POP	BX
	RET
TELLCARDSWITCH	ENDP
;****************************************************;
;*子程序名：	SENDMYCMD															**
;*功能：			发送访问卡的命令											**
;*入口参数：	堆栈中从顶到底：CMD,SUBCMD,DWVALH,DWVALL**
;*																									**
;*出口参数：	CX:BX		1F6..1F3											**
;*调用说明：先将DWVALL,DWVALH压栈,其次SUBCMD,CMD		**
;*					注意调用后平衡堆栈(ADD	SP,8)						**
;****************************************************;
SENDMYCMD	PROC	NEAR
	PUSH	BP
	MOV	BP,SP				;为取参数做准备[BP+4]=CMD,[BP+6]=SUBCMD,[BP+8]=DWVALH,[BP+10]=DWVALL
	;
	;MOV	DX,EDD_BASEPORT+6
	MOV	DX,01F6H
	MOV	AL,0E0H
	OUT	DX,AL
	MOV	CX,1000H
	LOOP	$				;DELAY TIME
SMC_TESTHDIDLE:
	MOV	DX,01F7H
	IN	AL,DX			;GET DATA FORM 1F7
	CMP	AL,050H
	JZ	SMC_HDREADY			;硬盘是否忙，忙的话重启控制器(可直接调用resetdisk)
	XOR	BX,BX
	XOR	CX,CX
	TEST	AL,01H				;看看是否命令有错
	JNZ	SMCMD_EXIT
	MOV	DX,01F6H				;开始重启控制器
	MOV	AL,0E0H
	OUT	DX,AL
	MOV	DX,03F6H
	MOV	AL,04H
	OUT	DX,AL
	MOV	CX,1000H
	LOOP	$					;DELAY TIME
	MOV	DX,01F6H
	MOV	AL,0E0H
	OUT	DX,AL
	MOV	DX,03F6H
	MOV	AL,08H
	OUT	DX,AL					;重启完毕
	MOV	CX,1000H
	LOOP	$					;DELAY TIME
	JMP	SMC_TESTHDIDLE
SMC_HDREADY:
	MOV	DX,01F2H					;SEND SUBCMD
	MOV	AL,BYTE PTR [BP+6]
	OUT	DX,AL
	;;;;									;SEND	DWVAL,CX:BX DWVAL
	MOV	CX,WORD PTR [BP+8]		;DWVALH
	MOV	BX,WORD PTR [BP+10]		;DWVALL
	;
	MOV	DX,01F3H
	MOV	AL,BL
	OUT	DX,AL
	MOV	DX,01F4H
	MOV	AL,BH
	OUT	DX,AL
	MOV	DX,01F5H
	MOV	AL,CL
	OUT	DX,AL
	MOV	DX,01F6H
	MOV	AL,CH
	OUT	DX,AL
	;
	MOV	DX,01F7H
	MOV	AL,BYTE PTR [BP+4]
	OUT	DX,AL
	;SEND DWVAL OVER
SMC_SVALOVER:
	MOV	CX,1000H					;DELAY TIME
	LOOP	$
	MOV	DX,01F7H
	IN	AL,DX
	TEST	AL,080H
	JNZ	SMC_SVALOVER
	;READ RETURN	DATA
	MOV	DX,01F6H							;RETURN CX:BX
	IN	AL,DX
	MOV	CH,AL
	MOV	DX,01F5H
	IN	AL,DX
	MOV	CL,AL
	MOV	DX,01F4H
	IN	AL,DX
	MOV	BH,AL
	MOV	DX,01F3H
	IN	AL,DX
	MOV	BL,AL
	;
SMCMD_EXIT:
	;
	MOV	SP,BP
	POP	BP
	RET
SENDMYCMD	ENDP
;****************************************************;
;*子程序名：	IDENTIFYCARD													**
;*功能：			确定卡是否存在												**
;*入口参数：																				**
;*出口参数：	bx=0卡不存在  bx=1卡存在							**
;****************************************************;
IDENTIFYCARD	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	CMP	CX,00H
	CMP	BX,00H
	MOV	BX,00H					;标志：卡不存在
	JNZ	IDENCARD_NOCARD
	;判断是否神郁卡
	;cx:bx=4350H:5953H 'SYPC'
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,08H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	CMP	CX,04350H
	CMP	BX,05953H
	MOV	BX,00H			  ;标志：卡不存在
	JNZ	IDENCARD_NOCARD
	MOV	BX,01H				;标志：卡存在
IDENCARD_NOCARD:
	PUSH	BX
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	POP	BX
	RET
IDENTIFYCARD	ENDP
;****************************************************;
;*子程序名：	READEEPROM														**
;*功能：			读EEPROM的数据												**
;*入口参数：																				**
;*出口参数：	存储在CARDDATA的数据结构中						**
;****************************************************;
READEEPROM	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;读取EEPROM的数据
	XOR	SI,SI					;用si来控制循环，因为在SENDMYCMD中，大部分的寄存器没有保护
	MOV	SI,0FFFFH
	MOV	AX,DS
	MOV	ES,AX
	MOV	DI,OFFSET NEI_OFFSET				;准备存储EEPROM结构的指针
REPP_LOOP:
	INC	SI
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,SI
	XOR	AH,AH
	PUSH	AX
	MOV	AX,07FH			;读命令
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	MOV	WORD PTR ES:[DI],BX					;低位放在前面1f31f4
	INC	DI
	INC	DI
	MOV	WORD PTR ES:[DI],CX 				;高位在后面 1f51f6
	INC	DI
	INC	DI
	CMP	SI,03FH
	JNZ	REPP_LOOP
	
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	RET
READEEPROM	ENDP
;****************************************************;
;*子程序名：	WRITEEEPROM														**
;*功能：			写EEPROM的数据												**
;*入口参数：	在CARDDATA的数据结构中的数据					**
;*出口参数：	BX=1 写成功	 BX=0 写失败							**
;****************************************************;
WRITEEEPROM	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;写入EEPROM
	XOR	SI,SI					;用si来控制循环，因为在SENDMYCMD中，大部分的寄存器没有保护
	MOV	SI,0FFFFH
	MOV	AX,DS
	MOV	ES,AX
	MOV	DI,OFFSET NEI_OFFSET				;准备存储EEPROM结构的指针
WREPP_LOOP:
	INC	SI
	;传送要写的数据
	MOV	AX,WORD PTR ES:[DI]
	PUSH	AX
	INC	DI
	INC	DI
	MOV	AX,WORD PTR ES:[DI]
	PUSH	AX
	INC	DI
	INC	DI
	;
	MOV	AX,SI
	XOR	AH,AH
	PUSH	AX
	MOV	AX,07EH			;写命令
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;
	CMP	SI,03FH
	JNZ	WREPP_LOOP
	;判断是否写成功，直接比较外网的OFFSET值与EEPROM中相应数相同
	;读
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,04				;外网OFFSET在EEPROM中的位置
	XOR	AH,AH
	PUSH	AX
	MOV	AX,07FH			;读命令
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8								;cx:bx中存了所读数据
	MOV	SI,OFFSET WAI_OFFSET
	MOV	AX,WORD PTR [SI]
	MOV DX,WORD PTR [SI+2]
	CMP	AX,BX
	MOV	BX,0
	JNZ	WREPP_FAIL
	CMP	DX,CX
	MOV	BX,0
	JNZ	WREPP_FAIL
	MOV	BX,1
WREPP_FAIL:
	PUSH	BX
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	POP	BX
	RET
WRITEEEPROM	ENDP
;****************************************************;
;*子程序名：	GETCARDSTATUS													**
;*功能：			读取卡的状态													**
;*入口参数：																				**
;*出口参数：	bx																		**
;*函数说明：  此子程序用来判断是否在安装状态，是否	**
;*						已经安装过卡。												**
;*						判断是否在安装状态，与10h比较，此位为1**
;*							不在安装状态，为0则相反							**
;*						判断卡是否安装过：与ff00h与一下，为		**
;*							0未安装，为1已安装									**
;****************************************************;
GETCARDSTATUS	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;读取状态数据
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,07H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;
	PUSH	BX
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	POP	BX
	RET
GETCARDSTATUS	ENDP
;****************************************************;
;*子程序名：	COMPAREOFFSETVAL()										**
;*功能：			比较计算得到的offset值与卡中所存的		**
;*						是否相同
;*入口参数：																				**
;*出口参数：	BX=0 不相同 BX=1 相同									**
;****************************************************;
COMPAREOFFSETVAL	PROC	NEAR
	;开卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,01H
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	;读取EEPROM中的外网offset值，与计算所得的offset比较
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	MOV	AX,04				;外网OFFSET在EEPROM中的位置
	XOR	AH,AH
	PUSH	AX
	MOV	AX,07FH			;读命令
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8								;cx:bx中存了所读数据
	MOV	SI,OFFSET OFFSETVAL
	MOV	AX,WORD PTR [SI]
	MOV DX,WORD PTR [SI+2]
	CMP	AX,BX
	MOV	BX,0
	JNZ	COMP_OFFVAL_NOTMATCH
	CMP	DX,CX
	MOV	BX,0
	JNZ	COMP_OFFVAL_NOTMATCH
	MOV	BX,1
COMP_OFFVAL_NOTMATCH:
	PUSH	BX
	;关卡
	MOV	AX,00H
	PUSH	AX
	PUSH	AX
	PUSH	AX
	MOV	AX,07DH
	PUSH	AX
	CALL	SENDMYCMD
	ADD	SP,8
	POP	BX
	RET
COMPAREOFFSETVAL	ENDP
;------------------控制卡的子程序 结束-----------------------------------------------------------
;------------------硬盘控制子程序 开始------------------------------------------------------------
;****************************************************;
;*子程序名：	RESETDISK															**
;*功能：			磁盘控制器重启(FLOP HD)								**
;*入口参数：	无																		**
;*出口参数：	CF=0	成功				CF=1  失败					**
;****************************************************;
RESETDISK	PROC	NEAR
	MOV	AH,0
	MOV	DL,80H				;缺省认为硬盘在IDE1 主盘
	INT	13H
	;
	RET
RESETDISK	ENDP
;****************************************************;
;*子程序名：	GETDISKATTR														**
;*功能：			获取磁盘属性													**
;*入口参数：	无																		**
;*出口参数：	CF=0	成功				CF=1  失败					**
;							AL=0  支持扩展		AL=1  不支持扩展		**
;****************************************************;
GETDISKATTR	PROC	NEAR
	;
	MOV	AH,41H
	MOV	BX,55AAH
	MOV	DL,80H			;缺省认为硬盘在IDE1 主盘
	INT	13H
	JC	GDA_NOSUPPORT		;访问失败，不支持扩展读写
	CMP	BX,0AA55H
	JNZ	GDA_NOSUPPORT		;访问失败，不支持扩展读写
	;支持扩展读写的话开始填充磁盘属性
	MOV	AX,4800H
	MOV	DX,0080H
	MOV	SI,OFFSET EDPARA_TABLE		;传送磁盘参数
	INT	13H
	;传送EDD
	MOV AX,EDD_SEG
	MOV	ES,AX
	MOV	DI,EDD_OFFSET
	MOV	SI,OFFSET EDD_BASEPORT			;SI->EDD
	MOV	CX,8
GDA_FILLEDD:
	MOV	AX,ES:WORD PTR [DI]
	MOV	[SI],AX
	INC	SI
	INC	SI
	INC	DI
	INC	DI
	LOOP	GDA_FILLEDD
	MOV	AL,0
	JMP	GDA_EXIT
GDA_NOSUPPORT:	
	MOV	AL,1
GDA_EXIT:
	RET
GETDISKATTR	ENDP
;****************************************************;
;*子程序名：	CALOFFSET()	(##NOTTEST)								**
;*功能：			计算offset值，单网可用LBA，扩展的LBA	**
;*入口参数：																				**
;*出口参数：																				**
;*函数说明：本函数经过改造，不仅仅填充硬盘的数据结构**
;*					而且填充卡的EEPROM TABLE.本来不想这么做,**
;*					考虑到程序可读性和程序的大小，权衡良久，**
;*					还是妥协了，从字面上已经看不出函数的作用**
;*					了    罗冰2005-7-1 20:52								**
;****************************************************;
CALOFFSET	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI
	;小字表示在程序结尾时候添加的代码
	push	di
	mov	ax,ds
	mov	es,ax
	;	
	MOV	SI,OFFSET	EDPARA_TOTAL
	MOV	AX,WORD	PTR	[SI]
	MOV	DX,WORD	PTR	[SI+2]	;DX:AX EDPARA_TOTAL
	MOV	BX,DX
	MOV	CL,6								;计算OFFSET值
	SHR BX,CL
	SAL	BX,CL
	MOV	SI,OFFSET MYOFFSETVAL		;存入MYOFFSETVAL(GCDZONE[7])
	XOR	AX,AX
	MOV	[SI],AX
	MOV	[SI+2],BX
	;
	mov	di,offset MYZONE_OFFSET	;填充EEPROM table
	mov	[di],ax
	mov	[di+2],bx
	;
	push	bx
	sub	bx,2
	mov	di,offset WAI_MAX		;填充EEPROM table
	mov	[di],ax
	mov	[di+2],bx
	pop	bx
	;
	MOV	CL,6
	SHR BX,CL		
	MOV	CL,5
	SAL BX,CL								;BX存贮了offset高16位值
	XOR	AX,AX
	MOV	SI,OFFSET	OFFSETVAL	;存入OFFSETVAL
	MOV	[SI],AX
	MOV	[SI+2],BX
	;
	mov	di,offset WAI_OFFSET	;填充EEPROM table
	mov	[di],ax
	mov	[di+2],bx
	;
	SUB	BX,2										;计算单网可用的总逻辑扇区数
	MOV	SI,OFFSET	PART_MAXLBA		;存入PART_MAXLBA
	MOV	[SI],AX
	MOV	[SI+2],BX								;bx存储了part_maxlba的高16位
	;
	mov	di,offset NEI_MAX	;填充EEPROM table
	mov	[di],ax
	mov	[di+2],bx
	;
	;计算扩展分区的大小，(可用386的寄存器)
	CLC
	SUB	AX,01676H
	SBB	BX,0271H					;减去起始的扇区
	MOV	SI,OFFSET MBR_EXT_MAX
	MOV	[SI],AX
	MOV	[SI+2],BX
	;##AMEND	扩展分区的结束扇区应该能整除 3FH
	;2005 - 7 - 8   18:17
	;用386指令计算扩展扇区的大小
	xor	edx,edx
	mov	dx,bx
	mov	ebx,mbr_ext_max
	mov	cx,03f00h
	div	cx						;余数在dx中
	mov	ax,dx
	mov	cx,003fh
	div	cl						;余数在ah中
	xor	edx,edx
	mov	dl,ah
	sub	ebx,edx
	mov	mbr_ext_max,ebx
	;##AMEND	计算扩展分区的结束LBA 的头，返填
	;2005-7-12 luobing
	mov	eax,mbr_ext_start
	add ebx,eax
	sub	ebx,1
	xor	edx,edx
	mov	eax,ebx    ;准备64位除法 /3f
	mov	ecx,0000003fh
	div	ecx					;商在eax中
	xor	edx,edx     ;余数丢弃，准备求模 %ff     
	mov	ecx,000000ffh
	div	ecx					;edx中放有余数 ，dl为所要数,dh=0
	mov	m_ext_endhead,dl	
	;
	mov	eax,EDPARA_TOTAL		;;填充EEPROM table
	sub	eax,1
	mov	MYZONE_MAX,eax
	pop	di
	POP	SI
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
CALOFFSET	ENDP
;****************************************************;
;*子程序名：	RWDISKLBA															**
;*功能：			扩展读写硬盘													**
;*入口参数：	EDAP_TABLE,AH(必须自己填充表)					**
;*出口参数：	CF=0 成功    CF=1失败									**
;****************************************************;
RWDISKLBA	PROC	NEAR
	MOV	DL,80H
	MOV	SI,OFFSET	EDAP_TABLE		;DS:SI
	INT	13H
	RET
RWDISKLBA	ENDP
;****************************************************;
;*子程序名：	READUSERMBR														**
;*功能：			读硬盘原来的MBR												**
;*入口参数：																				**
;*出口参数：	USER_MBR															**
;****************************************************;	
READUSERMBR	PROC	NEAR
	MOV	EDAP_RWCOUNT,01H
	MOV	AX,OFFSET USER_MBR
	MOV	EDAP_OFFSET,AX
	MOV	AX,DS
	MOV	EDAP_SEG,AX
	MOV	EDAP_RWLBAL,00H
	MOV	EDAP_RWLBAH,00H
	MOV	AH,42H
	CALL	RWDISKLBA
	RET
READUSERMBR	ENDP
;****************************************************;
;*子程序名：	READUSERWAIMBR												**
;*功能：			读硬盘原来的WAIMBR										**
;*入口参数：																				**
;*出口参数：	USERWAI_MBR														**
;****************************************************;	
READUSERWAIMBR	PROC	NEAR
	MOV	EDAP_RWCOUNT,01H
	MOV	AX,OFFSET USER_MBR
	MOV	EDAP_OFFSET,AX
	MOV	AX,DS
	MOV	EDAP_SEG,AX
	;
	MOV	SI,OFFSET OFFSETVAL
	MOV	AX,WORD PTR [SI]
	MOV	BX,WORD PTR [SI+2]
	MOV	EDAP_RWLBAL,AX
	MOV	EDAP_RWLBAH,BX
	MOV	AH,42H
	CALL	RWDISKLBA
	RET
READUSERWAIMBR	ENDP
;****************************************************;
;*子程序名：	COMPAERMBR														**
;*功能：			比较用户的分区表和规定的分区表,				**
;									除去用户的主分区类型（不比较）		**
;*入口参数：																				**
;*出口参数：	ax=0表示两字符串相同,否则不同					**
;****************************************************;
COMPAREMBR	PROC	NEAR
	MOV	AX,DS
	MOV	ES,AX
	;
	MOV	CX,4
	MOV	SI,OFFSET MBR_PRI
	MOV	DI,OFFSET USER_PRI
	REPZ	CMPSB			;比较
	MOV	AL,[SI-1]
	MOV	BL,ES:[DI-1]
	XOR	AH,AH
	MOV	BH,AH
	SUB	AX,BX
	JNZ	COMPPAR_EXIT
	MOV	CX,61				;比较的字节数
	MOV	SI,OFFSET MBR_PRI_CHS
	MOV	DI,OFFSET USER_PRI_CHS
	REPZ	CMPSB			;比较,
	MOV	AL,[SI-1]
	MOV	BL,ES:[DI-1]
	XOR	AH,AH
	MOV	BH,AH
	SUB	AX,BX
COMPPAR_EXIT:
	RET
COMPAREMBR	ENDP
;****************************************************;
;*子程序名：	FILLMBR																**
;*功能：			写MBR区																**
;*入口参数：																				**
;*出口参数：																				**
;****************************************************;
FILLMBR	PROC	NEAR
	MOV	AL,USER_PRI_TYPE
	CMP	AL,0
	JZ	FM_NOTYPE
	MOV	MBR_PRI_TYPE,AL
FM_NOTYPE:
	;将用户的MBR前466字节移动到准备写入硬盘的MBR
	MOV	AX,DS
	MOV	ES,AX
	MOV	SI,OFFSET USER_MBR		;准备源
	MOV	DI,OFFSET MBR					;准备目的
	MOV	CX,223
	REP	MOVSW
	;准备好MBR,开始写入内网
	MOV	EDAP_RWCOUNT,01H
	MOV	AX,OFFSET MBR
	MOV	EDAP_OFFSET,AX
	MOV	AX,DS
	MOV	EDAP_SEG,AX
	MOV	EDAP_RWLBAL,00H
	MOV	EDAP_RWLBAH,00H
	MOV	AH,43H
	CALL	RWDISKLBA
	RET
FILLMBR	ENDP
;****************************************************;
;*子程序名：	FILLWAIMBR														**
;*功能：			写外网MBR区														**
;*入口参数：																				**
;*出口参数：																				**
;****************************************************;
FILLWAIMBR	PROC	NEAR
	MOV	AL,USER_PRI_TYPE
	CMP	AL,0
	JZ	FMWAI_NOTYPE
	MOV	MBR_PRI_TYPE,AL
FMWAI_NOTYPE:
	;将用户的MBR前466字节移动到准备写入硬盘的MBR
	MOV	AX,DS
	MOV	ES,AX
	MOV	SI,OFFSET USER_MBR		;准备源
	MOV	DI,OFFSET MBR					;准备目的
	MOV	CX,223
	REP	MOVSW
	;准备好MBR,开始写入外网
	;##AMEND 2005-7-4 20:20
	;开始写入外网
	mov	edap_rwcount,01h
	mov	ax,offset mbr
	mov	edap_offset,ax
	mov	ax,ds
	mov	edap_seg,ax
	mov	si,offset offsetval
	mov	ax,word ptr [si]
	mov	bx,word ptr [si+2]
	mov	edap_rwlbal,ax
	mov	edap_rwlbah,bx
	mov	ah,43h
	call	rwdisklba
	;
	RET
FILLWAIMBR	ENDP
;------------------硬盘控制子程序 结束------------------------------------------------------------
;------------------显示部分子程序 开始------------------------------------------------------------
;****************************************************;
;*子程序名：	INITVIDEO															**
;*功能：			初始化显示（模式、寄存器、背景）			**
;*入口参数：	无																		**
;*出口参数：	无																		**
;****************************************************;
INITVIDEO	PROC	NEAR
	MOV	BX,SYVIDEOMODE
	CALL	SETMODEL
	;
	MOV	AX,OFFSET	PALETTEDATA
	PUSH	AX
	CALL	INITPALETTE
	POP	CX			;平衡堆栈
	;
	MOV	BX,DEEPBLUE
	CALL	SETBACKCOLOR
	RET
INITVIDEO	ENDP
;****************************************************;
;*子程序名：	SETMODEL															**
;*功能：			设置显示模式													**
;*入口参数：	BX=mode																**
;*出口参数：	无																		**
;****************************************************;
SETMODEL	PROC	NEAR
	PUSH	AX
	MOV	AX,04F02H
	INT	10H
	POP	AX
	RET
SETMODEL	ENDP
;****************************************************;
;*子程序名：	INITPALETTE														**
;*功能：			颜色寄存器定义												**
;*入口参数：	堆栈中为数据的起始地址								**
;*出口参数：	无																		**
;****************************************************;
INITPALETTE	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+4]=DATA POINT
	PUSH	SI
	MOV	DX,03C8H
	MOV	AL,0
	OUT	DX,AL
  DB	0EBH					;延时
  DB	00H
  DB	0EBH
  DB	00H						;延时
  ;
  XOR	SI,SI
  JMP	SHORT	INITPALADD
INITPALLOOP:
	MOV	BX,WORD	PTR	[BP+4]
	ADD	BX,SI
	MOV	AL,BYTE	PTR	[BX]
	XOR	AH,AH
	MOV	CL,2
	SAR	AX,CL
	MOV	DX,03C9H
	OUT	DX,AL
	INC	SI
INITPALADD:
	CMP	SI,0300H
	JL	SHORT	INITPALLOOP
  ;	
	POP	SI
	POP	BP
	RET
INITPALETTE	ENDP
;****************************************************;
;*子程序名：	SETBACKCOLOR													**
;*功能：			设置背景															**
;*入口参数：	bx=color															**
;*出口参数：																				**
;****************************************************;	
SETBACKCOLOR	PROC	NEAR
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	BP
	;
	MOV	AX,SCREEN_WIDTH
	MOV	CX,SCREEN_HEIGHT
	MUL	CX
	INC	DX						;????
	PUSH	BX					;1 COLOR	[BP+2]
	PUSH	DX					;2 PAGE  			[BP]
	MOV	BP,SP
	PUSH	ES					;
	CLC
	CLD
	XOR	DX,DX
	MOV	DI,0A000H
	MOV	ES,DI
	XOR	DI,DI
SETBACKCOLOR1:
		PUSH	DX
		MOV	AX,04F05H
		MOV	BX,0
		INT	10H
		MOV	AX,[BP+2]
		MOV	AH,AL
		MOV	CX,08000H
		REP	STOSW
		POP	DX
		INC	DX
		CMP	DX,[BP]
		JC	SETBACKCOLOR1
		POP	ES
		ADD	SP,4
		POP	BP
		POP	DX
		POP	CX
		POP	AX
		RET
SETBACKCOLOR	ENDP
;****************************************************;
;*子程序名：	VLINE																	**
;*功能：			画竖线																**
;*入口参数：	堆栈中从顶到底：y1(word),y2,x,				**
;*														color(word)	(X1<X2)		**
;*出口参数：																				**
;*调用说明：先将color压栈,其次x,y2,y1,必须保证y1<y2	**
;*					注意调用后平衡堆栈											**
;****************************************************;
VLINE	PROC	NEAR
	PUSH	BP
	MOV	BP,SP
	PUSH	SI
	PUSH	DI
	;
	PUSH		ES
	MOV		AX,[BP+4]	
	MOV		CX,SCREEN_WIDTH	
	MUL		CX
	ADD		AX,[BP+8]
	ADC		DX,0
	MOV		DI,0A000H
	MOV		ES,DI
	MOV		DI,AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H
	MOV		CX,[BP+6]	
	SUB		CX,[BP+4]
	INC		CX
	MOV		AX,[BP+10]
	CLD	
VLINELOOP:	
	MOV		ES:[DI],AL
	ADD		DI,SCREEN_WIDTH
	JNC	SHORT VLINENOCHANPAGE
	INC		DX
	PUSH		AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H
	POP		AX
VLINENOCHANPAGE:
	LOOP	SHORT VLINELOOP
	;
	POP	ES
  POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
VLINE	ENDP
;

;****************************************************;
;*子程序名：	HLINE																	**
;*功能：			画横线																**
;*入口参数：	堆栈中从顶到底：x1(word),x2,y,				**
;*														color(word)	(X1<X2)		**
;*出口参数：																				**
;*调用说明：先将color压栈,其次y,x2,x1,必须保证x1<x2	**
;*					注意调用后平衡堆栈											**
;****************************************************;
HLINE	PROC	NEAR
	PUSH	BP
	MOV	BP,SP				;为取参数做准备[BP+4]=x1,[BP+6]=x2,[BP+8]=y,[BP+10]=color...
	PUSH	SI
	PUSH	DI
	;
	PUSH		ES
 	MOV		AX,[BP+8]
	MOV		CX,SCREEN_WIDTH
  MUL		CX
  ADD		AX,[BP+4]
  ADC		DX,0
  MOV		DI,0A000H
 	MOV		ES,DI
  MOV		DI,AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H
	MOV		CX,[BP+6]
	SUB		CX,[BP+4]
	INC		CX
	MOV		AX,[BP+10]
	CLD	
HLINELOOP:
	STOSB	
	OR		DI,DI
	JNE	SHORT HLINENOCHANPAGE
	PUSH		AX
	MOV		AX,04F05H
	MOV		BX,0
	INC		DX
	INT		010H
	POP		AX
HLINENOCHANPAGE:
	LOOP	SHORT HLINELOOP
	;
	POP		ES
   ;
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
HLINE	ENDP

;****************************************************;
;*子程序名：	DRAWRECT															**
;*功能：			画矩形																**
;*入口参数：	堆栈中从顶到底：left(word),top,right	**
;*														bottom	color					**
;*出口参数：																				**
;*调用说明：先将color压栈,其次BOTTOM,RIGHT,TOP,LEFT	**
;*					保证left<right,top<bottom								**
;*					注意调用后平衡堆栈											**
;****************************************************;
DRAWRECT	PROC	NEAR
	PUSH	BP
	MOV	BP,SP			;为取参数做准备[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=RIGHT,[BP+10]=BOTTOM,[BP+12]=COLOR
	PUSH	SI
	PUSH	DI
	;
	MOV	DI,WORD PTR [BP+4]
	MOV	SI,WORD PTR [BP+12]
  PUSH	SI								;		HLINE(LEFT,RIGHT,top,COLOR);
	PUSH	WORD PTR [BP+6]
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	PUSH	SI							 ;		HLINE(LEFT,RIGHT,BOTTOM,COLOR);
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8							 
	;	
	PUSH	SI							;		VLINE(TOP,BOTTOM,LEFT,COLOR);
	PUSH	DI
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+6]
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;	
 	PUSH	SI								;		VLINE(TOP,BOTTOM,RIGHT,COLOR);
	PUSH	WORD PTR [BP+8]
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+6]
	CALL	NEAR PTR VLINE
	ADD	SP,8
	;
 	POP	DI
	POP	SI
	POP	BP
	RET	
DRAWRECT	ENDP
;****************************************************;
;*子程序名：	PUTPIXEL															**
;*功能：			写象素点															**
;*入口参数：	堆栈中从顶到底：x(word),y,color				**
;*出口参数：	无																		**
;*调用说明：先将color压栈,其次y,x										**
;*					注意调用后平衡堆栈											**
;****************************************************;
PUTPIXEL	PROC	NEAR
	PUSH	BP
	MOV	BP,SP			;为取参数做准备 [BP+4]=X,[BP+6]=Y,[BP+8]=COLOR
	PUSH	DI
	PUSH		ES			
  ;
  MOV		AX,[BP+6]			
 	MOV		BX,[BP+4]			
  MOV		CX,SCREEN_WIDTH 
  MUL		CX
	ADD		AX,BX	
	ADC		DX,0
	MOV		DI,0A000H
	MOV		ES,DI
	MOV		DI,AX
	MOV		AX,04F05H
	MOV		BX,0
	INT		010H	
	MOV		AX,[BP+8]
	STOSB	
	;
	POP		ES	
	POP	DI
	POP	BP
	RET	
PUTPIXEL	ENDP

;****************************************************;
;*子程序名：	PUTASCII															**
;*功能：			显示英文															**
;*入口参数：	堆栈中从顶到底：X(word),Y,CODE				**
;*																		color					**
;*出口参数：																				**
;*调用说明：先将color压栈,其次CODE,Y,X							**
;*	ax,bx,cx,dx被影响		注意调用后平衡堆栈					**
;****************************************************;
PUTASCII	PROC	NEAR
	PUSH	BP
	MOV	BP,SP				;为取参数做准备[BP+4]=X,[BP+6]=Y,[BP+8]=CODE,[BP+10]=COLOR
	SUB	SP,4
	PUSH	SI
   ;
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTASCIISCH				;BEGIN:		SERCH FOR CHAR IN ASCII TABLE
PUTASCIICHLOOP:		
	MOV	AX,WORD PTR [BP-2]
	MOV	DX,17										;CODE+ENGLISH	MODEL
	IMUL	DX
	MOV	BX,AX
	MOV	AL,BYTE PTR ASCIITABLE[BX]
	CMP	AL,BYTE PTR [BP+8]
	JNE	SHORT PUTASCIIUNFIT
  JMP	SHORT PUTASCIIFIT
PUTASCIIUNFIT:
	INC	WORD PTR [BP-2]
PUTASCIISCH:
	CMP	WORD PTR [BP-2],MAXASCII
	JL	SHORT PUTASCIICHLOOP
PUTASCIIFIT:										;END:		SERCH FOR CHAR IN ASCII TABLE,SUCCESS
   ;
	MOV	AX,WORD PTR [BP-2]
	MOV	WORD PTR [BP-4],AX
 	XOR	SI,SI
	JMP	SHORT PUTASCIIDISWAIADD
PUTASCIIDISNEI:
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTASCIIDISNEIADD
PUTASCIIDIS:									;DISPALY CHAR IS OR NOT
 ;
	MOV	AX,WORD PTR [BP-4]
	MOV	DX,17
	IMUL	DX
	ADD	AX,SI
	MOV	BX,AX
	MOV	AL,BYTE PTR ASCIITABLE[BX+1]
	MOV	AH,0
	MOV	CL,7
	SUB	CL,BYTE PTR [BP-2]
	MOV	DX,1
	SHL	DX,CL
	TEST	AX,DX
	JE	SHORT PUTASCIIDISNO				;CAN NOT DISPLAY THSI PIXEL,JUMP
  PUSH	WORD PTR [BP+10]				;DISPLAY CHAR
	MOV	AX,WORD PTR [BP+6]
	ADD	AX,SI
	PUSH	AX
	MOV	AX,WORD PTR [BP+4]
	ADD	AX,WORD PTR [BP-2]
	PUSH	AX
	CALL	NEAR PTR PUTPIXEL
	ADD	SP,6
PUTASCIIDISNO:
	INC	WORD PTR [BP-2]
PUTASCIIDISNEIADD:
	CMP	WORD PTR [BP-2],8
	JL	SHORT PUTASCIIDIS
	INC	SI
PUTASCIIDISWAIADD:
	CMP	SI,16
	JL	SHORT PUTASCIIDISNEI
   ;
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTASCII	ENDP

;****************************************************; 
;*子程序名：	PUTHZ																	** 
;*功能：			显示汉字															** 
;*入口参数：	堆栈中从顶到底：X(word),Y,CODE				** 
;*																		color					** 
;*出口参数：																				** 
;*调用说明：先将color压栈,其次CODE,Y,X							** 
;*	ax,bx,cx,dx被影响	注意调用后平衡堆栈						** 
;****************************************************;
PUTHZ	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+4]=X,[BP+6]=Y,[BP+8]=CODE,[BP+10]=COLOR
	SUB	SP,2
	PUSH	SI
	PUSH	DI
  ;
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTHZFCODECOMP
PUTHZFCODE:
  ;	
	MOV	AX,WORD PTR [BP-2]
	MOV	DX,34									;LENGTH OF HZ MODEL
	IMUL	DX
	MOV	BX,AX
	MOV	AX,WORD PTR HZK16TABLE[BX]
	;XCHG	AL,AH;;;传到堆栈中的汉字高低相反，（调试发现），直接传送汉字内码时必须调整才能比较
	CMP	AX,WORD PTR [BP+8]
	JNE	SHORT PUTHZFCODEADD
   ;	
   ;				BREAK;
   ;	
	JMP	SHORT PUTHZFCODEOK
PUTHZFCODEADD:
	INC	WORD PTR [BP-2]
PUTHZFCODECOMP:
	MOV	AX,WORD PTR [BP-2]
	CMP	AX,WORD PTR HZCOUNT
	JL	SHORT PUTHZFCODE
PUTHZFCODEOK:								;FIND CODE IN HZTABLE OR WENT TO END
   ;	
	MOV	DI,WORD PTR [BP-2]	;INDEX=END OF TABLE
  ;	
	CMP	DI,WORD PTR HZCOUNT
	JNE	SHORT PUTHZDISPLAY		;找到则显示
	JMP	PUTHZFCODEFAIL				;没找到，退出
PUTHZDISPLAY:
   ;
	XOR	SI,SI
	JMP	PUTHZDISPWAI
PUTHZDISPNEI1:								;DISPLAYNEI1
   ;	
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTHZDISPNEICOMP
PUTHZDISPNEI1CODE:
  ;	
	MOV	CL,7
	SUB	CL,BYTE PTR [BP-2]
	MOV	AX,1
	SHL	AX,CL
	PUSH	AX
	MOV	AX,DI
	MOV	DX,34
	IMUL	DX
	MOV	DX,SI
	SHL	DX,1
	ADD	AX,DX
	MOV	BX,AX
	POP	AX
	TEST	AX,WORD PTR HZK16TABLE[BX+2]
	JE	SHORT PUTHZDISPNEI1NO							;NO DISPLAY
   ;	
	PUSH	WORD PTR [BP+10]
	MOV	AX,WORD PTR [BP+6]
	ADD	AX,SI
	PUSH	AX
	MOV	AX,WORD PTR [BP+4]
	ADD	AX,WORD PTR [BP-2]
	PUSH	AX
	CALL	NEAR PTR PUTPIXEL
	ADD	SP,6
PUTHZDISPNEI1NO:
	INC	WORD PTR [BP-2]
PUTHZDISPNEICOMP:
	CMP	WORD PTR [BP-2],8
	JL	SHORT PUTHZDISPNEI1CODE
   ;	
	MOV	WORD PTR [BP-2],0
	JMP	SHORT PUTHZDISPNEI2CNMP						;DISPLAYNEI2
PUTHZDISPNEI2CODE:
   ;	
	MOV	CL,15
	SUB	CL,BYTE PTR [BP-2]
	MOV	AX,1
	SHL	AX,CL
	PUSH	AX
	MOV	AX,DI
	MOV	DX,34
	IMUL	DX
	MOV	DX,SI
	SHL	DX,1
	ADD	AX,DX
	MOV	BX,AX
	POP	AX
	TEST	AX,WORD PTR HZK16TABLE[BX+2]
	JE	SHORT PUTHZDISPNEI2ADD
   ;	
	PUSH	WORD PTR [BP+10]
	MOV	AX,WORD PTR [BP+6]
	ADD	AX,SI
	PUSH	AX
	MOV	AX,WORD PTR [BP+4]
	ADD	AX,WORD PTR [BP-2]
	ADD	AX,8
	PUSH	AX
	CALL	NEAR PTR PUTPIXEL
	ADD	SP,6
PUTHZDISPNEI2ADD:
	INC	WORD PTR [BP-2]
PUTHZDISPNEI2CNMP:
	CMP	WORD PTR [BP-2],8
	JL	SHORT PUTHZDISPNEI2CODE
	INC	SI
PUTHZDISPWAI:
	CMP	SI,16
	JGE	PUTHZDISPEXIT
	JMP	PUTHZDISPNEI1
PUTHZDISPEXIT:
PUTHZFCODEFAIL:
   ;	
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTHZ	ENDP

;****************************************************; 
;*子程序名：	PUTSTR																** 
;*功能：			显示字符串														** 
;*入口参数：	堆栈中从顶到底：X(word),Y,S(字符串地址** 
;*																		color					** 
;*出口参数：																				** 
;*调用说明：先将color压栈,其次S,Y,X									** 
;*					注意调用后平衡堆栈											** 
;****************************************************;	
PUTSTR	PROC	NEAR
	PUSH	BP
	MOV	BP,SP			;为取参数做准备[BP+4]=X,[BP+6]=Y,[BP+8]=OFFSET S,[BP+10]=COLOR
	PUSH	SI
	PUSH	DI
	MOV	DI,WORD PTR [BP+4]		;[DI]<- X
   ;
	XOR	SI,SI
	JMP	SHORT PUTSTRWHILE
PUTSTRIFASC_HZ:
   ;
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	CMP	BYTE PTR [BX],128
	JAE	SHORT PUTSTRHZ
   ;	
	PUSH	WORD PTR [BP+10]			;PUTASCII
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	MOV	AL,BYTE PTR [BX]
	PUSH	AX
	PUSH	WORD PTR [BP+6]
	PUSH	DI
	CALL	NEAR PTR PUTASCII
	ADD	SP,8
   ;	
	INC	SI
   ;	
	ADD	DI,8
   ;	
	JMP	SHORT PUTSTRWHILE
PUTSTRHZ:
   ;	
	PUSH	WORD PTR [BP+10]				;PUTHZ
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	PUSH	WORD PTR [BX]
	PUSH	WORD PTR [BP+6]
	PUSH	DI
	CALL	NEAR PTR PUTHZ
	ADD	SP,8
  ;	
	INC	SI
   ;	
	INC	SI
   ;	
	ADD	DI,16
PUTSTRWHILE:
	MOV	BX,WORD PTR [BP+8]
	ADD	BX,SI
	CMP	BYTE PTR [BX],0
	JNE	SHORT PUTSTRIFASC_HZ
   ;	
	POP	DI
	POP	SI
	POP	BP
	RET	
PUTSTR	ENDP
;****************************************************; 
;*子程序名：	STRLEN																** 
;*功能：			测量字符串长度												** 
;*入口参数：	堆栈中从顶到底：S(字符串地址)					** 
;*																		color					** 
;*出口参数：	ax=length															** 
;*调用说明：将S压栈																	** 
;*					注意调用后平衡堆栈											**
;****************************************************;
STRLEN	PROC	NEAR
	PUSH	BP
	MOV	BP,SP
	MOV	CX,WORD PTR [BP+4]			;[BP+4]=S (ADDRESS OF STRING)
   ;	
	XOR	DX,DX
	JMP	SHORT STRLENWHILECOMP
STRLENWHILEADD:
   ;	
	INC	DX
STRLENWHILECOMP:
	MOV	BX,CX
	INC	CX
	CMP	BYTE PTR [BX],0
	JNE	SHORT STRLENWHILEADD	
  ;
	MOV	AX,DX									;DX=LENGTH OF STRING (BYTES)
	;													;return ax=length
	POP	BP
	RET	
STRLEN	ENDP

PUTBUTTON	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=PTEXT(POINT STRING),[BP+10]=COLOR
	SUB	SP,6
	PUSH	SI
	PUSH	DI
	MOV	SI,WORD PTR [BP+4]
	MOV	DI,WORD PTR [BP+6]
   ;
	PUSH	WORD PTR [BP+8]
	CALL	NEAR PTR STRLEN
	POP	CX
	MOV	WORD PTR [BP-2],AX					;LENGTH OF STING->[BP-2]
  ;	
	MOV	AX,WORD PTR [BP-2]
	ADD	AX,4
	MOV	CL,3
	SHL	AX,CL
	;XOR	AH,AH								;若要修改,注意此段
	;MOV	DL,BYTE PTR CHARWIDTH
	;MUL	DL
	MOV	DX,SI
	ADD	DX,AX
	DEC	DX
	MOV	WORD PTR [BP-4],DX					;[BP-4]=RIGHT
   ;
	MOV	AX,DI
	ADD	AX,DEFAULTBUTTONHEIGHT
	DEC	AX
	MOV	WORD PTR [BP-6],AX					;[BP-6]=BOTTOM
  ;	
	MOV	AX,WHITE
	PUSH	AX
	PUSH	DI
	PUSH	WORD PTR [BP-4]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;	
	MOV	AX,WHITE
	PUSH	AX
	PUSH	SI
	PUSH	WORD PTR [BP-6]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
  ;	
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP-6]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-4]
	DEC	AX
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	WORD PTR [BP-6]
	PUSH	WORD PTR [BP-4]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;	
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP-4]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-6]
	DEC	AX
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR VLINE
	ADD	SP,8
 ;
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	WORD PTR [BP-4]
	PUSH	WORD PTR [BP-6]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;		PUTSTR(LEFT+CHARWIDTH*2,TOP+CHARHEIGHT/2,PTEXT,COLOR);
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	MOV	AX,CHARHEIGHT
	SHR	AX,1
	ADD	AX,[BP+6]
	PUSH	AX
	MOV	AX,CHARWIDTH
	SHL	AX,1
	ADD	AX,[BP+4]
	PUSH	AX
	CALL	NEAR PTR PUTSTR
	ADD	SP,8
   ;
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTBUTTON	ENDP
;****************************************************;
;*子程序名：	FILLRECT															**
;*功能：			填充矩形															**
;*入口参数：	堆栈中从顶到底：left(word),top,right	**
;*														bottom	color					**
;*出口参数：																				**
;*调用说明：先将color压栈,其次BOTTOM,RIGHT,TOP,LEFT	**
;*					保证left<right,top<bottom		注意调用后平**
;*																						衡堆栈**
;****************************************************;
FILLRECT	PROC	NEAR
	PUSH	BP
	MOV	BP,SP		;为取参数做准备[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=RIGHT,[BP+10]=BOTTOM,[BP+12]=COLOR
	PUSH	SI
  ;
	XOR	SI,SI
   ;
	MOV	SI,WORD PTR [BP+6]
	JMP	SHORT FILLRECTCONCOUNT
FILRECTFILL:
    ;	
	PUSH	WORD PTR [BP+12]			;HLINE(LEFT,RIGHT,Y,COLOR);
	PUSH	SI
	PUSH	WORD PTR [BP+8]
	PUSH	WORD PTR [BP+4]
	CALL	NEAR PTR HLINE
	ADD	SP,8
	INC	SI
FILLRECTCONCOUNT:
	CMP	SI,WORD PTR [BP+10]
	JLE	SHORT FILRECTFILL
   ;
	POP	SI
	POP	BP
	RET	
FILLRECT	ENDP
;****************************************************; 
;*子程序名：	PUTWINDOW															** 
;*功能：			显示Window窗口												** 
;*入口参数：	堆栈中从顶到底：left(word),top,right	** 
;*						bottom,wndcolor,captiontext,capcolor	** 
;*出口参数：																				** 
;*调用说明：先将color压栈,其次...										** 
;*					注意调用后平衡堆栈											** 
;****************************************************;
PUTWINDOW	PROC	NEAR
	PUSH	BP
	MOV	BP,SP					;[BP+16]=CAPTIONCOLOR,[BP+14]=PCAPTIONTEXT,[BP+12]=WNDCOLOR,
	PUSH	SI					;[BP+10]=BOTTOM,	[BP+8]=RIGHT,	[BP+6]=TOP,	[BP+4]=LEFT
	PUSH	DI
	MOV	DI,WORD PTR [BP+4]
	MOV	SI,WORD PTR [BP+6]
    ;
	PUSH	WORD PTR [BP+12]				;填充窗体背景
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	PUSH	SI
	PUSH	DI
	CALL	NEAR PTR FILLRECT
	ADD	SP,10
    ;
 	MOV	AX,WHITE									;制造阴影:begin
	PUSH	AX
	PUSH	SI
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8
   ;
	MOV	AX,WHITE
	PUSH	AX
	PUSH	DI
	PUSH	WORD PTR [BP+10]
	PUSH	SI
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP+10]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP+8]
	DEC	AX
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;	
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	WORD PTR [BP+10]
	PUSH	WORD PTR [BP+8]
	PUSH	DI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,WORD PTR [BP+8]
	DEC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP+10]
	DEC	AX
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,DARKBLACK							
	PUSH	AX
	PUSH	WORD PTR [BP+8]
	PUSH	WORD PTR [BP+10]
	PUSH	SI
	CALL	NEAR PTR VLINE
	ADD	SP,8										;制造阴影:begin
   ;
	MOV	AX,BLUE										;标题栏颜色填充
	PUSH	AX
	MOV	AX,SI
	ADD	AX,DEFAULTCAPTIONHEIGHT
	INC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP+8]
	ADD	AX,-4
	PUSH	AX
	MOV	AX,SI
	ADD	AX,3
	PUSH	AX
	MOV	AX,DI
	ADD	AX,4
	PUSH	AX
	CALL	NEAR PTR FILLRECT
	ADD	SP,10
  ;
	PUSH	WORD PTR [BP+16]					;标题栏 字
	PUSH	WORD PTR [BP+14]
	MOV	AX,SI
	ADD	AX,7					;##amend  2005-7-12 22:27,amend for show logo
	PUSH	AX
	MOV	AX,DI
	ADD	AX,10+logo_width+charheight/4
	PUSH	AX
	CALL	NEAR PTR PUTSTR
	ADD	SP,8
  ;
  ;showlog
  mov	ax,si
  add	ax,4
  push	ax
  mov	ax,di
	add	ax,8
	push	ax
	call	showlogo
	add	sp,4
	;  
	POP	DI
	POP	SI
	POP	BP
	RET	
PUTWINDOW	ENDP
;****************************************************; 
;*子程序名：	PUTEDITBOX														** 
;*功能：			显示编辑窗口													** 
;*入口参数：	堆栈中从顶到底：left(word),top,				** 
;*													nrchar(字符个数)				** 
;*出口参数：	改变了xcur,ycur(当前xy坐标)						** 
;*调用说明：先将nrchar压栈,其次top,left							** 
;*					注意调用后平衡堆栈											** 
;****************************************************;
PUTEDITBOX	PROC	NEAR
	PUSH	BP
	MOV	BP,SP									;;[BP+4]=LEFT,[BP+6]=TOP,[BP+8]=NRCHAR
	PUSH SI
	PUSH DI
	MOV	SI,WORD PTR [BP+4]		;SI=LEFT
	MOV	DI,WORD PTR [BP+6]		;DI=TOP
   ;	
	MOV	AX,WORD PTR [BP+8]		;计算窗口的右边位置
	MOV	CL,3									;放在[sp-2]中 right
	SHL	AX,CL									;注意，由于字的宽度为8，可以以移位计算，此程序不可移植
	MOV	DX,SI
	ADD	DX,AX
	DEC	DX
	MOV	WORD PTR [BP-2],DX
   ;	
  MOV	AX,DI
	ADD	AX,DEFAULTEDITBOXHEIGHT
	DEC	AX
	MOV	WORD PTR [BP-4],AX
   ;	
	MOV	AX,WHITE							;设置底色 （白色）
	PUSH	AX
	PUSH	WORD PTR [BP-4]
	PUSH	WORD PTR [BP-2]
	PUSH	DI
	PUSH	SI
	CALL	NEAR PTR FILLRECT
	ADD	SP,10
  ;	
	MOV	AX,DARKBLACK          ;开始画框架
	PUSH	AX
	PUSH	DI
	PUSH	WORD PTR [BP-2]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
   ;	
	MOV	AX,DARKBLACK
	PUSH	AX
	PUSH	SI
	PUSH	WORD PTR [BP-4]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-2]
	DEC	AX
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR HLINE
	ADD	SP,8
   ;	
	MOV	AX,LIGHTBLACK
	PUSH	AX
	MOV	AX,SI
	INC	AX
	PUSH	AX
	MOV	AX,WORD PTR [BP-4]
	DEC	AX
	PUSH	AX
	MOV	AX,DI
	INC	AX
	PUSH	AX
	CALL	NEAR PTR VLINE
	ADD	SP,8
   ;
	MOV	AX,WHITE
	PUSH	AX
	PUSH	WORD PTR [BP-4]
	PUSH	WORD PTR [BP-2]
	PUSH	SI
	CALL	NEAR PTR HLINE
	ADD	SP,8
  ;
	MOV	AX,WHITE
	PUSH	AX
	PUSH	WORD PTR [BP-2]
	PUSH	WORD PTR [BP-4]
	PUSH	DI
	CALL	NEAR PTR VLINE
	ADD	SP,8
  ;
	MOV	AX,SI							;改变当前光标的坐标
	ADD	AX,4
	MOV	XCUR,AX
  MOV	AX,DI
	ADD	AX,6
	MOV	YCUR,AX
  ;
	POP	DI
	POP	SI
	MOV	SP,BP
	POP	BP
	RET	
PUTEDITBOX	ENDP
;****************************************************;
;*子程序名：	SHOWLOGO															**
;*功能：			显示神郁 LOGO													**
;*入口参数：	堆栈中从顶到底：x(word),y							**
;*出口参数：	无																		**
;*调用说明：	y,x压栈																**
;*					注意调用后平衡堆栈		当前的背景色05bh	**
;*					用别的背景色修改函数中相应的地方				**
;****************************************************;
SHOWLOGO	PROC	NEAR
	PUSH	BP
	MOV	BP,SP    	 ;为取参数做准备 [BP+4]=X,[BP+6]=Y
	;
	XOR	CX,CX
	XOR	DX,DX
	MOV	BX,WORD PTR [BP+6];
	MOV	SI,OFFSET logopic
	MOV	CX,LOGO_HEIGHT
SHOWLOGO_LOOPWAI:
	PUSH	CX
	MOV	CX,LOGO_WIDTH	
	MOV	AX,WORD PTR [BP+4];
	DEC AX
SHOWLOGO_LOOPNEI:
	INC	AX
	MOV	DL,BYTE PTR [SI]
	INC	SI
	cmp	dl,011h				;注意看那些颜色是不用显示的，以保持logo的完整性
	jz	showlogo_notdis
	PUSHA
	PUSH	DX
	PUSH	BX
	PUSH	AX
	CALL	PUTPIXEL
	ADD	SP,6
	POPA
showlogo_notdis:
	LOOP	SHOWLOGO_LOOPNEI
	POP	CX
	INC	BX
	LOOP	SHOWLOGO_LOOPWAI
	;
	MOV	SP,BP
	POP	BP
	RET
SHOWLOGO	ENDP
;------------------显示部分子程序 结束------------------------------------------------------------
;
;;+++++++++++++++++++++++++++++++	子程序结束	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
END START